CCS PCD C Compiler, Version 5.015, 5967               01-Nov-18 21:37

               Filename:   C:\Users\thipawan\Desktop\Embedded\MilestoneIII\MPIDE\Test.lst

               ROM used:   926 bytes (3%)
                           Largest free fragment is 29790
               RAM used:   148 (2%) at main() level
                           160 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    F10
*
0C30:  GOTO    E50
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  AND     W0,#7,W3
0DFE:  LSR     W0,#3,W0
0E00:  ADD     W0,W2,W0
0E02:  BTSC    W0.0
0E04:  ADD     W3,#8,W3
0E06:  BCLR    W0.0
0E08:  CP0.B   W1L
0E0A:  BSW.Z   [W0].W3
0E0C:  RETURN  
*
0E74:  MOV     [W2],W0
0E76:  GOTO    W0
*
0E86:  AND     W0,#7,W2
0E88:  LSR     W0,#3,W0
0E8A:  ADD     W0,W1,W0
0E8C:  MOV.B   [W0],W0L
0E8E:  BTST.C  W0.W2
0E90:  CLR     W0
0E92:  BTSC.B  42.0
0E94:  INC     W0,W0
0E96:  RETURN  
....................  
.................... #list 
....................  
.................... #include <BL_Support.h> 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #use delay (internal = 8 MHz, clock = 32 MHz) 
.................... #PIN_SELECT U1RX = PIN_B12 //PIN_B14// 
.................... #PIN_SELECT U1TX = PIN_B13 //PIN_B13// 
.................... #use rs232 (UART1, BAUD = 9600, xmit = PIN_B13, rcv = PIN_B14) 
....................  
.................... #define NUM_SWT 4 
.................... unsigned int swt_count[NUM_SWT]={30, 15, 10, 6}; 
.................... boolean swt_flag[NUM_SWT] ={FALSE, FALSE, FALSE, FALSE}; 
....................  
.................... typedef void (*SWTCallback)(void); 
.................... SWTCallback fp_ta[NUM_SWT] = {0, 0, 0, 0}; 
....................  
.................... void SystemTick(void){ 
*
0E0E:  MOV     W5,[W15++]
.................... 	unsigned int i; 
.................... 	for(i=0;i<NUM_SWT; i++){ 
0E10:  CLR     81A
0E12:  MOV     81A,W4
0E14:  CP      W4,#4
0E16:  BRA     C,E4C
.................... 		if(swt_count[i] > 0){ 
0E18:  MOV     81A,W0
0E1A:  SL      W0,#1,W0
0E1C:  MOV     #800,W4
0E1E:  ADD     W0,W4,W0
0E20:  MOV     [W0],W5
0E22:  CP0     W5
0E24:  BRA     Z,E48
.................... 			swt_count[i]--; 
0E26:  MOV     81A,W0
0E28:  SL      W0,#1,W0
0E2A:  MOV     #800,W4
0E2C:  ADD     W0,W4,W5
0E2E:  DEC     [W5],[W5]
.................... 			if(swt_count[i] == 0) { 
0E30:  MOV     81A,W0
0E32:  SL      W0,#1,W0
0E34:  MOV     #800,W4
0E36:  ADD     W0,W4,W0
0E38:  MOV     [W0],W5
0E3A:  CP0     W5
0E3C:  BRA     NZ,E48
.................... 				swt_flag[i] = TRUE; 
0E3E:  MOV     81A,W0
0E40:  MOV     #1,W1
0E42:  MOV     #808,W2
0E44:  CALL    DFC
.................... 			} 
.................... 		} 
0E48:  INC     081A
0E4A:  BRA     E12
.................... 	} 
0E4C:  MOV     [--W15],W5
0E4E:  RETURN  
.................... } 
....................  
.................... #INT_TIMER1 
.................... void TIMER1_ISR(){ 
0E50:  PUSH    42
0E52:  PUSH    36
0E54:  PUSH    32
0E56:  MOV     W0,[W15++]
0E58:  MOV     #2,W0
0E5A:  REPEAT  #C
0E5C:  MOV     [W0++],[W15++]
.................... 	SystemTick(); 
0E5E:  CALL    E0E
0E62:  BCLR.B  84.3
0E64:  MOV     #1A,W0
0E66:  REPEAT  #C
0E68:  MOV     [--W15],[W0--]
0E6A:  MOV     [--W15],W0
0E6C:  POP     32
0E6E:  POP     36
0E70:  POP     42
0E72:  RETFIE  
.................... } 
....................  
.................... void SWTService(void){ 
*
0EB0:  MOV     W5,[W15++]
0EB2:  MOV     W6,[W15++]
.................... 	unsigned int i; 
.................... 	for(i = 0;i<NUM_SWT;i++){ 
0EB4:  CLR     812
0EB6:  MOV     812,W4
0EB8:  CP      W4,#4
0EBA:  BRA     C,F0A
.................... 		if(swt_flag[i] == TRUE){ 
0EBC:  MOV     812,W0
0EBE:  MOV     #808,W1
0EC0:  CALL    E86
0EC4:  LSR     W0,#0,W4
0EC6:  AND     #1,W4
0EC8:  CP      W4,#1
0ECA:  BRA     NZ,F06
.................... 			swt_flag[i] = FALSE; 
0ECC:  PUSH    42
0ECE:  BCLR.B  81.7
0ED0:  SETM.B  42
0ED2:  BSET.B  81.7
0ED4:  MOV     812,W0
0ED6:  MOV     #0,W1
0ED8:  MOV     #808,W2
0EDA:  CALL    DFC
0EDE:  BCLR.B  81.7
0EE0:  POP     42
0EE2:  BSET.B  81.7
.................... 			if(fp_ta[i] != 0){ 
0EE4:  MOV     812,W0
0EE6:  SL      W0,#1,W0
0EE8:  MOV     #80A,W4
0EEA:  ADD     W0,W4,W0
0EEC:  MOV     [W0],W5
0EEE:  CP0     W5
0EF0:  BRA     Z,F06
.................... 				(*fp_ta[i])(); 
0EF2:  MOV     812,W0
0EF4:  SL      W0,#1,W0
0EF6:  MOV     #80A,W4
0EF8:  ADD     W0,W4,W0
0EFA:  MOV     W0,W5
0EFC:  MOV     W1,W6
0EFE:  MOV     W5,W2
0F00:  MOV     W6,W3
0F02:  CALL    E74
.................... 			} 
.................... 		} 
0F06:  INC     0812
0F08:  BRA     EB6
.................... 	} 
0F0A:  MOV     [--W15],W6
0F0C:  MOV     [--W15],W5
0F0E:  RETURN  
.................... } 
....................  
.................... void LED0(void){ 
.................... 	output_toggle(PIN_A2); 
*
0E98:  BCLR.B  2C0.2
0E9A:  BTG.B   2C4.2
0E9C:  RETURN  
.................... } 
....................  
.................... void LED1(void){ 
.................... 	output_toggle(PIN_A4); 
0E9E:  BCLR.B  2C0.4
0EA0:  BTG.B   2C4.4
0EA2:  RETURN  
.................... } 
....................  
.................... void LED2(void){ 
.................... 	output_toggle(PIN_B2); 
0EA4:  BCLR.B  2C8.2
0EA6:  BTG.B   2CC.2
0EA8:  RETURN  
.................... } 
.................... void LED3(void){ 
.................... 	output_toggle(PIN_B3); 
0EAA:  BCLR.B  2C8.3
0EAC:  BTG.B   2CC.3
0EAE:  RETURN  
.................... } 
....................  
.................... void Init_Timer1(){ 
.................... 	setup_timer1(TMR_INTERNAL | TMR_DIV_BY_8, 33333); 
*
0E78:  CLR     104
0E7A:  MOV     #8235,W4
0E7C:  MOV     W4,102
0E7E:  MOV     #8010,W4
0E80:  MOV     W4,104
.................... 	enable_interrupts(INT_TIMER1); 
0E82:  BSET.B  94.3
0E84:  RETURN  
.................... } 
....................  
.................... void main(void){ 
*
0F10:  MOV     #2780,W15
0F12:  MOV     #27FF,W0
0F14:  MOV     W0,20
0F16:  NOP     
0F18:  MOV     #4444,W0
0F1A:  MOV     W0,A4
0F1C:  BSET.B  81.7
0F1E:  MOV     #46,W0
0F20:  MOV.B   W0L,742
0F22:  MOV     #57,W0
0F24:  MOV.B   W0L,742
0F26:  BCLR.B  742.6
0F28:  MOV     #3F0C,W0
0F2A:  MOV     W0,6A4
0F2C:  MOV     #300,W0
0F2E:  MOV     W0,6CC
0F30:  MOV     #46,W0
0F32:  MOV.B   W0L,742
0F34:  MOV     #57,W0
0F36:  MOV.B   W0L,742
0F38:  BSET.B  742.6
0F3A:  CLR     744
0F3C:  BCLR.B  2C9.5
0F3E:  BSET.B  2CD.5
0F40:  SETM    32C
0F42:  MOV     #1E,W4
0F44:  MOV     W4,800
0F46:  MOV     #F,W4
0F48:  MOV     W4,802
0F4A:  MOV     #A,W4
0F4C:  MOV     W4,804
0F4E:  MOV     #6,W4
0F50:  MOV     W4,806
0F52:  CLR.B   808
0F54:  CLR     80A
0F56:  CLR     80C
0F58:  CLR     80E
0F5A:  CLR     810
.................... 	disable_interrupts(GLOBAL); 
0F5C:  BCLR.B  81.7
0F5E:  MOV     #E0,W4
0F60:  MOV     W4,42
0F62:  BSET.B  81.7
.................... 	Init_Timer1(); 
0F64:  CALL    E78
.................... 	enable_interrupts(GLOBAL); 
0F68:  BCLR.B  81.7
0F6A:  CLR     42
0F6C:  BSET.B  81.7
....................  
.................... 	fp_ta[0] = &LED0; 
0F6E:  MOV     #80A,W5
0F70:  MOV     #E,W0
0F72:  MOV.B   W0L,1
0F74:  MOV     #E98,W0
0F76:  MOV     W0,[W5]
.................... 	fp_ta[1] = &LED1; 
0F78:  MOV     #80C,W5
0F7A:  MOV     #E,W0
0F7C:  MOV.B   W0L,1
0F7E:  MOV     #E9E,W0
0F80:  MOV     W0,[W5]
.................... 	fp_ta[2] = &LED2; 
0F82:  MOV     #80E,W5
0F84:  MOV     #E,W0
0F86:  MOV.B   W0L,1
0F88:  MOV     #EA4,W0
0F8A:  MOV     W0,[W5]
.................... 	fp_ta[3] = &LED3; 
0F8C:  MOV     #810,W5
0F8E:  MOV     #E,W0
0F90:  MOV.B   W0L,1
0F92:  MOV     #EAA,W0
0F94:  MOV     W0,[W5]
....................  
.................... 	while(TRUE) { 
.................... 		SWTService();	 
0F96:  CALL    EB0
0F9A:  BRA     F96
.................... 	} 
.................... } 
0F9C:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
