CCS PCD C Compiler, Version 5.015, 5967               02-Nov-18 01:44

               Filename:   C:\Users\thipawan\Desktop\Embedded\MilestoneIII\MPIDE\HOmwWK.lst

               ROM used:   1224 bytes (4%)
                           Largest free fragment is 29492
               RAM used:   166 (2%) at main() level
                           176 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    1018
*
0C30:  GOTO    E7A
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    73,74,00
0E0A:  DATA    61,74,00
0E0C:  DATA    75,73,00
0E0E:  DATA    3D,25,00
0E10:  DATA    58,0A,00
0E12:  DATA    00,00,00
0E14:  AND     W0,#7,W3
0E16:  LSR     W0,#3,W0
0E18:  ADD     W0,W2,W0
0E1A:  BTSC    W0.0
0E1C:  ADD     W3,#8,W3
0E1E:  BCLR    W0.0
0E20:  CP0.B   W1L
0E22:  BSW.Z   [W0].W3
0E24:  RETURN  
*
0E9E:  MOV     [W2],W0
0EA0:  GOTO    W0
*
0EB0:  AND     W0,#7,W2
0EB2:  LSR     W0,#3,W0
0EB4:  ADD     W0,W1,W0
0EB6:  MOV.B   [W0],W0L
0EB8:  BTST.C  W0.W2
0EBA:  CLR     W0
0EBC:  BTSC.B  42.0
0EBE:  INC     W0,W0
0EC0:  RETURN  
0EC2:  MOV     W0,W3
0EC4:  SWAP    W1
0EC6:  MOV.B   #5,W4L
0EC8:  DEC.B   0003
0ECA:  DEC.B   0008
0ECC:  BRA     Z,EF4
0ECE:  MOV     W3,W0
0ED0:  SL      W3,#4,W3
0ED2:  LSR     W0,#C,W0
0ED4:  AND     #F,W0
0ED6:  BRA     NZ,EE0
0ED8:  CP.B    W4L,#1
0EDA:  BRA     Z,EE0
0EDC:  BTSS.B  3.7
0EDE:  BRA     EC8
0EE0:  ADD     #30,W0
0EE2:  MOV     #3A,W2
0EE4:  CP      W0,W2
0EE6:  BRA     NC,EEA
0EE8:  ADD.B   2,W0L
0EEA:  BTSC.B  223.1
0EEC:  BRA     EEA
0EEE:  MOV     W0,224
0EF0:  BSET.B  3.7
0EF2:  BRA     EC8
0EF4:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #use delay (internal = 8 MHz, clock = 32MHz) 
.................... #PIN_SELECT U1RX = PIN_B12 //PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 //PIN_B15 // 
.................... #use rs232 (UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #define numSwt 4 
.................... unsigned int swtCount[numSwt]={30,15,10,6}; 
.................... unsigned int refill[numSwt]={30,15,10,6}; 
.................... boolean swtFlag[numSwt]={FALSE,FALSE,FALSE,FALSE}; 
....................  
.................... typedef void (*SWTCallback)(void); 
.................... SWTCallback fp_ta[numSwt]={0,0,0,0}; 
....................  
.................... void SystemTick(void){ 
*
0E26:  MOV     W5,[W15++]
.................... 	unsigned int i; 
.................... 	for(i=0;i<numSwt;i++){ 
0E28:  CLR     82C
0E2A:  MOV     82C,W4
0E2C:  CP      W4,#4
0E2E:  BRA     C,E76
.................... 		if(swtCount[i]>0){ 
0E30:  MOV     82C,W0
0E32:  SL      W0,#1,W0
0E34:  MOV     #800,W4
0E36:  ADD     W0,W4,W0
0E38:  MOV     [W0],W5
0E3A:  CP0     W5
0E3C:  BRA     Z,E72
.................... 			swtCount[i]--; 
0E3E:  MOV     82C,W0
0E40:  SL      W0,#1,W0
0E42:  MOV     #800,W4
0E44:  ADD     W0,W4,W5
0E46:  DEC     [W5],[W5]
.................... 			if(swtCount[i]==0){ 
0E48:  MOV     82C,W0
0E4A:  SL      W0,#1,W0
0E4C:  MOV     #800,W4
0E4E:  ADD     W0,W4,W0
0E50:  MOV     [W0],W5
0E52:  CP0     W5
0E54:  BRA     NZ,E72
.................... 				swtFlag[i]=TRUE; 
0E56:  MOV     82C,W0
0E58:  MOV     #1,W1
0E5A:  MOV     #810,W2
0E5C:  CALL    E14
.................... 				swtCount[i]=refill[i]; 
0E60:  MOV     82C,W0
0E62:  SL      W0,#1,W0
0E64:  MOV     #800,W4
0E66:  ADD     W0,W4,W5
0E68:  MOV     82C,W0
0E6A:  SL      W0,#1,W0
0E6C:  MOV     #808,W4
0E6E:  ADD     W0,W4,W0
0E70:  MOV     [W0],[W5]
.................... 			} 
.................... 		} 
0E72:  INC     082C
0E74:  BRA     E2A
.................... 	} 
0E76:  MOV     [--W15],W5
0E78:  RETURN  
.................... } 
.................... #INT_TIMER1 
.................... void TIMER1_ISR(){ 
0E7A:  PUSH    42
0E7C:  PUSH    36
0E7E:  PUSH    32
0E80:  MOV     W0,[W15++]
0E82:  MOV     #2,W0
0E84:  REPEAT  #C
0E86:  MOV     [W0++],[W15++]
.................... 	SystemTick(); 
0E88:  CALL    E26
0E8C:  BCLR.B  84.3
0E8E:  MOV     #1A,W0
0E90:  REPEAT  #C
0E92:  MOV     [--W15],[W0--]
0E94:  MOV     [--W15],W0
0E96:  POP     32
0E98:  POP     36
0E9A:  POP     42
0E9C:  RETFIE  
.................... } 
.................... int a,b,c,d,res; 
.................... void SWTService(void){ 
*
0FB8:  MOV     W5,[W15++]
0FBA:  MOV     W6,[W15++]
.................... 	unsigned int i; 
.................... 	for(i=0;i<numSwt;i++){ 
0FBC:  CLR     824
0FBE:  MOV     824,W4
0FC0:  CP      W4,#4
0FC2:  BRA     C,1012
.................... 		if(swtFlag[i]==TRUE){ 
0FC4:  MOV     824,W0
0FC6:  MOV     #810,W1
0FC8:  CALL    EB0
0FCC:  LSR     W0,#0,W4
0FCE:  AND     #1,W4
0FD0:  CP      W4,#1
0FD2:  BRA     NZ,100E
.................... 			swtFlag[i]=FALSE; 
0FD4:  PUSH    42
0FD6:  BCLR.B  81.7
0FD8:  SETM.B  42
0FDA:  BSET.B  81.7
0FDC:  MOV     824,W0
0FDE:  MOV     #0,W1
0FE0:  MOV     #810,W2
0FE2:  CALL    E14
0FE6:  BCLR.B  81.7
0FE8:  POP     42
0FEA:  BSET.B  81.7
.................... 			if(fp_ta[i]!=0){ 
0FEC:  MOV     824,W0
0FEE:  SL      W0,#1,W0
0FF0:  MOV     #812,W4
0FF2:  ADD     W0,W4,W0
0FF4:  MOV     [W0],W5
0FF6:  CP0     W5
0FF8:  BRA     Z,100E
.................... 				(*fp_ta[i])(); 
0FFA:  MOV     824,W0
0FFC:  SL      W0,#1,W0
0FFE:  MOV     #812,W4
1000:  ADD     W0,W4,W0
1002:  MOV     W0,W5
1004:  MOV     W1,W6
1006:  MOV     W5,W2
1008:  MOV     W6,W3
100A:  CALL    E9E
.................... 			} 
.................... 		} 
100E:  INC     0824
1010:  BRA     FBE
.................... 	} 
1012:  MOV     [--W15],W6
1014:  MOV     [--W15],W5
1016:  RETURN  
.................... } 
.................... void task_led0(void){ 
*
0EF6:  MOV     W5,[W15++]
.................... 	res=a+b*2+c*4+d*8; 
0EF8:  MOV     81C,W4
0EFA:  MUL.UU  W4,#2,W0
0EFC:  MOV     81A,W4
0EFE:  ADD     W0,W4,W5
0F00:  MOV     81E,W4
0F02:  MUL.UU  W4,#4,W0
0F04:  ADD     W0,W5,W5
0F06:  MOV     820,W4
0F08:  MUL.UU  W4,#8,W0
0F0A:  ADD     W0,W5,W0
0F0C:  MOV     W0,822
.................... 	printf("status=%X\n",res); 
0F0E:  MOV     #0,W1
0F10:  MOV     W1,W0
0F12:  CLR.B   1
0F14:  CALL    DFC
0F18:  INC     W1,W1
0F1A:  BTSC.B  223.1
0F1C:  BRA     F1A
0F1E:  MOV     W0,224
0F20:  MOV     #6,W0
0F22:  CPSGT   W1,W0
0F24:  BRA     F10
0F26:  MOV     822,W0
0F28:  MOV     #704,W1
0F2A:  CALL    EC2
0F2E:  BTSC.B  223.1
0F30:  BRA     F2E
0F32:  MOV     #A,W4
0F34:  MOV     W4,224
....................  
.................... 	if (a==0){ 
0F36:  CP0     81A
0F38:  BRA     NZ,F40
.................... 		a=1; 
0F3A:  MOV     #1,W4
0F3C:  MOV     W4,81A
.................... 	} 
0F3E:  BRA     F48
.................... 	else if (a==1){ 
0F40:  MOV     81A,W4
0F42:  CP      W4,#1
0F44:  BRA     NZ,F48
.................... 		a=0; 
0F46:  CLR     81A
.................... 	} 
.................... 	output_bit(PIN_A2,a);	 
0F48:  CP0     81A
0F4A:  BRA     NZ,F50
0F4C:  BCLR.B  2C4.2
0F4E:  BRA     F52
0F50:  BSET.B  2C4.2
0F52:  BCLR.B  2C0.2
0F54:  MOV     [--W15],W5
0F56:  RETURN  
.................... } 
.................... void task_led1(void){ 
.................... 	if (b==0){ 
0F58:  CP0     81C
0F5A:  BRA     NZ,F62
.................... 		b=1; 
0F5C:  MOV     #1,W4
0F5E:  MOV     W4,81C
.................... 		} 
0F60:  BRA     F6A
.................... 	else if (b==1){ 
0F62:  MOV     81C,W4
0F64:  CP      W4,#1
0F66:  BRA     NZ,F6A
.................... 		b=0; 
0F68:  CLR     81C
.................... 	} 
.................... 	output_bit(PIN_A4,b); 
0F6A:  CP0     81C
0F6C:  BRA     NZ,F72
0F6E:  BCLR.B  2C4.4
0F70:  BRA     F74
0F72:  BSET.B  2C4.4
0F74:  BCLR.B  2C0.4
0F76:  RETURN  
.................... } 
.................... void task_led2(void){ 
.................... 	if (c==0){ 
0F78:  CP0     81E
0F7A:  BRA     NZ,F82
.................... 		c=1; 
0F7C:  MOV     #1,W4
0F7E:  MOV     W4,81E
.................... 	} 
0F80:  BRA     F8A
.................... 	else if (c==1){ 
0F82:  MOV     81E,W4
0F84:  CP      W4,#1
0F86:  BRA     NZ,F8A
.................... 		c=0; 
0F88:  CLR     81E
.................... 	} 
.................... 	output_bit(PIN_B2,c); 
0F8A:  CP0     81E
0F8C:  BRA     NZ,F92
0F8E:  BCLR.B  2CC.2
0F90:  BRA     F94
0F92:  BSET.B  2CC.2
0F94:  BCLR.B  2C8.2
0F96:  RETURN  
.................... } 
.................... void task_led3(void){ 
.................... 	if (d==0){ 
0F98:  CP0     820
0F9A:  BRA     NZ,FA2
.................... 		d=1; 
0F9C:  MOV     #1,W4
0F9E:  MOV     W4,820
.................... 	} 
0FA0:  BRA     FAA
.................... 	else if (d==1){ 
0FA2:  MOV     820,W4
0FA4:  CP      W4,#1
0FA6:  BRA     NZ,FAA
.................... 		d=0; 
0FA8:  CLR     820
.................... 	} 
.................... 	output_bit(PIN_B3,d); 
0FAA:  CP0     820
0FAC:  BRA     NZ,FB2
0FAE:  BCLR.B  2CC.3
0FB0:  BRA     FB4
0FB2:  BSET.B  2CC.3
0FB4:  BCLR.B  2C8.3
0FB6:  RETURN  
.................... } 
....................  
.................... void Init_Timer1(){ 
.................... 	setup_timer1(TMR_INTERNAL| TMR_DIV_BY_8 ,33333); 
*
0EA2:  CLR     104
0EA4:  MOV     #8235,W4
0EA6:  MOV     W4,102
0EA8:  MOV     #8010,W4
0EAA:  MOV     W4,104
.................... 	enable_interrupts(INT_TIMER1); 
0EAC:  BSET.B  94.3
0EAE:  RETURN  
.................... } 
.................... void main(void){ 
*
1018:  MOV     #2780,W15
101A:  MOV     #27FF,W0
101C:  MOV     W0,20
101E:  NOP     
1020:  MOV     #4444,W0
1022:  MOV     W0,A4
1024:  BSET.B  81.7
1026:  MOV     #46,W0
1028:  MOV.B   W0L,742
102A:  MOV     #57,W0
102C:  MOV.B   W0L,742
102E:  BCLR.B  742.6
1030:  MOV     #3F0C,W0
1032:  MOV     W0,6A4
1034:  MOV     #300,W0
1036:  MOV     W0,6CC
1038:  MOV     #46,W0
103A:  MOV.B   W0L,742
103C:  MOV     #57,W0
103E:  MOV.B   W0L,742
1040:  BSET.B  742.6
1042:  CLR     744
1044:  MOV     #8000,W4
1046:  MOV     W4,220
1048:  MOV     #400,W4
104A:  MOV     W4,222
104C:  BSET.B  220.3
104E:  MOV     #1A0,W4
1050:  MOV     W4,228
1052:  SETM    32C
1054:  MOV     #1E,W4
1056:  MOV     W4,800
1058:  MOV     #F,W4
105A:  MOV     W4,802
105C:  MOV     #A,W4
105E:  MOV     W4,804
1060:  MOV     #6,W4
1062:  MOV     W4,806
1064:  MOV     #1E,W4
1066:  MOV     W4,808
1068:  MOV     #F,W4
106A:  MOV     W4,80A
106C:  MOV     #A,W4
106E:  MOV     W4,80C
1070:  MOV     #6,W4
1072:  MOV     W4,80E
1074:  CLR.B   810
1076:  CLR     812
1078:  CLR     814
107A:  CLR     816
107C:  CLR     818
.................... 	a=0; 
107E:  CLR     81A
.................... 	b=0; 
1080:  CLR     81C
.................... 	c=0; 
1082:  CLR     81E
.................... 	d=0; 
1084:  CLR     820
.................... 	disable_interrupts(GLOBAL); 
1086:  BCLR.B  81.7
1088:  MOV     #E0,W4
108A:  MOV     W4,42
108C:  BSET.B  81.7
.................... 	Init_Timer1();	 
108E:  CALL    EA2
.................... 	enable_interrupts(GLOBAL); 
1092:  BCLR.B  81.7
1094:  CLR     42
1096:  BSET.B  81.7
....................  
.................... 	fp_ta[0]= &task_led0; 
1098:  MOV     #812,W5
109A:  MOV     #E,W0
109C:  MOV.B   W0L,1
109E:  MOV     #EF6,W0
10A0:  MOV     W0,[W5]
.................... 	fp_ta[1]= &task_led1; 
10A2:  MOV     #814,W5
10A4:  MOV     #F,W0
10A6:  MOV.B   W0L,1
10A8:  MOV     #F58,W0
10AA:  MOV     W0,[W5]
.................... 	fp_ta[2]= &task_led2; 
10AC:  MOV     #816,W5
10AE:  MOV     #F,W0
10B0:  MOV.B   W0L,1
10B2:  MOV     #F78,W0
10B4:  MOV     W0,[W5]
.................... 	fp_ta[3]= &task_led3; 
10B6:  MOV     #818,W5
10B8:  MOV     #F,W0
10BA:  MOV.B   W0L,1
10BC:  MOV     #F98,W0
10BE:  MOV     W0,[W5]
.................... 	while(TRUE){ 
....................  
.................... 		SWTService(); 
10C0:  CALL    FB8
10C4:  BRA     10C0
.................... 	} 
.................... } 
10C6:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
