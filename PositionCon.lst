CCS PCD C Compiler, Version 5.015, 5967               17-Nov-18 09:01

               Filename:   C:\Users\thipawan\Desktop\Embedded\MilestoneIII\MPIDE\PositionCon.lst

               ROM used:   1830 bytes (5%)
                           Largest free fragment is 28886
               RAM used:   155 (2%) at main() level
                           197 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    1202
*
0C24:  GOTO    FDE
*
0C50:  GOTO    FAC
*
0C74:  GOTO    1000
*
0C98:  GOTO    1022
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    69,20,00
0E0A:  DATA    3A,20,00
0E0C:  DATA    25,64,00
0E0E:  DATA    0A,00,00
*
107C:  MOV     W5,[W15++]
107E:  MOV     #C,W5
1080:  REPEAT  #3
1082:  MOV     [W5++],[W15++]
1084:  BTSS    W0.F
1086:  BRA     10A0
1088:  NEG     W0,W0
108A:  BSET    W4.8
108C:  BTSS    W4.F
108E:  BRA     10A0
1090:  MOV     W0,[W15++]
1092:  MOV     #2D,W0
1094:  BTSC.B  223.1
1096:  BRA     1094
1098:  MOV     W0,224
109A:  MOV     [--W15],W0
109C:  BCLR    W4.8
109E:  DEC.B   0008
10A0:  CLR     W5
10A2:  MOV     W0,W7
10A4:  MOV     W4,W9
10A6:  BCLR    W4.F
10A8:  CP0.B   W4L
10AA:  BRA     NZ,10B8
10AC:  BTSC    W9.F
10AE:  BRA     10B4
10B0:  MOV     #0,W5
10B2:  BRA     10D2
10B4:  MOV     #0,W5
10B6:  BRA     10D2
10B8:  SUB.B   W4L,#6,W5L
10BA:  BRA     NC,10D0
10BC:  MOV     #30,W0
10BE:  BTSS    W9.F
10C0:  MOV     #20,W0
10C2:  BTSC.B  223.1
10C4:  BRA     10C2
10C6:  MOV     W0,224
10C8:  DEC     W5,W5
10CA:  BRA     NN,10C2
10CC:  MOV     #5,W5
10CE:  BRA     10D2
10D0:  MOV     W4,W5
10D2:  MOV     #6,W4
10D4:  BTSC    W5.8
10D6:  INC     W4,W4
10D8:  BSET    W5.E
10DA:  BTSC    W9.F
10DC:  BSET    W5.F
10DE:  MOV     #2710,W8
10E0:  REPEAT  #11
10E2:  DIV.U   W7,W8
10E4:  CALL    1128
10E8:  MOV     W1,W7
10EA:  MOV     #3E8,W8
10EC:  REPEAT  #11
10EE:  DIV.U   W7,W8
10F0:  CALL    1128
10F4:  MOV     W1,W7
10F6:  MOV     #64,W8
10F8:  REPEAT  #11
10FA:  DIV.U   W7,W8
10FC:  CALL    1128
1100:  MOV     W1,W7
1102:  MOV     #A,W8
1104:  REPEAT  #11
1106:  DIV.U   W7,W8
1108:  CALL    1128
110C:  BTSS    W9.8
110E:  BRA     111A
1110:  MOV     #2D,W0
1112:  BTSC.B  223.1
1114:  BRA     1112
1116:  MOV     W0,224
1118:  BCLR    W9.8
111A:  MOV     #30,W0
111C:  ADD.B   W1L,W0L,W0L
111E:  MOV     W0,2A
1120:  BTSC.B  223.1
1122:  BRA     1120
1124:  MOV     W0,224
1126:  BRA     1168
1128:  MOV     #30,W6
112A:  CP0     W0
112C:  BRA     NZ,114A
112E:  BTSS    W5.E
1130:  BRA     115E
1132:  DEC     W4,W4
1134:  CP.B    W4L,W5L
1136:  BRA     Z,113C
1138:  BTSC.B  42.0
113A:  RETURN  
113C:  CP0     W0
113E:  BRA     NZ,114A
1140:  BTSS    W5.E
1142:  BRA     115E
1144:  BTSS    W5.F
1146:  MOV     #20,W6
1148:  BRA     115E
114A:  BCLR    W5.E
114C:  BTSS    W9.8
114E:  BRA     115E
1150:  MOV     W0,W10
1152:  MOV     #2D,W0
1154:  BTSC.B  223.1
1156:  BRA     1154
1158:  MOV     W0,224
115A:  BCLR    W9.8
115C:  MOV     W10,W0
115E:  ADD.B   W6L,W0L,W0L
1160:  BTSC.B  223.1
1162:  BRA     1160
1164:  MOV     W0,224
1166:  RETURN  
1168:  MOV     #12,W5
116A:  REPEAT  #3
116C:  MOV     [--W15],[W5--]
116E:  MOV     [--W15],W5
1170:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #use delay (internal = 8 MHz, clock = 32MHz) 
1172:  CP0     W0
1174:  BTSC.B  42.1
1176:  BRA     1180
1178:  REPEAT  #3E7B
117A:  NOP     
117C:  DEC     W0,W0
117E:  BRA     NZ,1178
1180:  RETURN  
.................... #PIN_SELECT U1RX = PIN_B12 //PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 //PIN_B15 // 
.................... #use rs232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
....................  
.................... #define TIME_PERIOD 2000 
.................... #define tolerance 30 
....................  
.................... #define servoTop   PIN_B8  
.................... #define	servoUnder  PIN_B15 
....................  
.................... #define	lim_SW_X PIN_B14 
.................... #define lim_SW_Y PIN_B4 
.................... #define lim_SW_Z PIN_B5 
....................  
.................... #define motorXI  PIN_B0  
.................... #define motorXII PIN_B1 
.................... #define ena_X    PIN_B2  
.................... //Encoder X is INT0 PIN_B7 
....................  
.................... #define	motorYI  PIN_A2 
.................... #define motorYII PIN_A4 
.................... #define ena_Y    PIN_B9 
.................... #define	encodeY  PIN_B6 
....................  
.................... #define	motorZI  PIN_A0  
.................... #define motorZII PIN_A1  
.................... #define ena_Z    PIN_B10 
.................... #define	encodeZ  PIN_B3 
....................  
....................  
.................... #PIN_SELECT INT1 = encodeY  
.................... #PIN_SELECT INT2 = encodeZ  
.................... #PIN_SELECT OC1 =  ena_X   
.................... #PIN_SELECT OC2 =  ena_Y 
.................... #PIN_SELECT OC3 =  ena_Z 
.................... #PIN_SELECT OC4 =  servoTop 
.................... #PIN_SELECT OC5 =  servoUnder 
....................  
.................... int countX = 0; 
.................... int countY = 0; 
.................... int countZ = 0;  
....................  
.................... char arrayData[6] = {}; 
.................... char arrayDataXI[2] = {}; 
.................... char arrayDataXII[2] = {}; 
.................... char arrayDataYI[2] = {}; 
.................... char arrayDataYII[2] = {}; 
.................... char arrayAng[2] = {}; 
.................... char arrayAngGrip[2] = {}; 
....................  
.................... char SM_id = 1; 
.................... int getPackage = 0; 
.................... void SM_RxD(int c){ 
*
0E10:  MOV     W5,[W15++]
0E12:  MOV     W6,[W15++]
.................... 	if (SM_id <= 2){ 
0E14:  MOV.B   818,W0L
0E16:  SE      W0,W0
0E18:  CP      W0,#2
0E1A:  BRA     GT,E2C
.................... 		if (c ==  0xFF){ 
0E1C:  MOV     844,W4
0E1E:  XOR     #FF,W4
0E20:  BRA     NZ,E26
.................... 			SM_id++; 
0E22:  INC.B   0818
.................... 		}else{ 
0E24:  BRA     E2A
.................... 			SM_id = 1; 
0E26:  MOV.B   #1,W0L
0E28:  MOV.B   W0L,818
.................... 		} 
.................... 	}else if (SM_id <= 3){ 
0E2A:  BRA     FA6
0E2C:  MOV.B   818,W0L
0E2E:  SE      W0,W0
0E30:  CP      W0,#3
0E32:  BRA     GT,E44
.................... 		if (c == 0x02){ 
0E34:  MOV     844,W4
0E36:  CP      W4,#2
0E38:  BRA     NZ,E3E
.................... 			SM_id++; 
0E3A:  INC.B   0818
.................... 		}else{ 
0E3C:  BRA     E42
.................... 			SM_id = 1; 
0E3E:  MOV.B   #1,W0L
0E40:  MOV.B   W0L,818
.................... 		} 
.................... 	}else if (SM_id <= 4){ 
0E42:  BRA     FA6
0E44:  MOV.B   818,W0L
0E46:  SE      W0,W0
0E48:  CP      W0,#4
0E4A:  BRA     GT,E5C
.................... 		if ( c == 0x06){ 
0E4C:  MOV     844,W4
0E4E:  CP      W4,#6
0E50:  BRA     NZ,E56
.................... 			SM_id++; 
0E52:  INC.B   0818
.................... 		}else{ 
0E54:  BRA     E5A
.................... 			SM_id = 1; 
0E56:  MOV.B   #1,W0L
0E58:  MOV.B   W0L,818
.................... 		} 
.................... 	}else if (SM_id > 4 && SM_id <= 6){ 
0E5A:  BRA     FA6
0E5C:  MOV.B   818,W0L
0E5E:  SE      W0,W0
0E60:  CP      W0,#4
0E62:  BRA     LE,E7E
0E64:  MOV.B   818,W0L
0E66:  SE      W0,W0
0E68:  CP      W0,#6
0E6A:  BRA     GT,E7E
.................... 		arrayDataXI[SM_id - 5] = c; //PosX 
0E6C:  MOV.B   818,W0L
0E6E:  SE      W0,W0
0E70:  SUB     W0,#5,W5
0E72:  MOV     #80C,W4
0E74:  ADD     W5,W4,W6
0E76:  MOV     844,W0
0E78:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0E7A:  INC.B   0818
.................... 	}else if (SM_id == 7){ 
0E7C:  BRA     FA6
0E7E:  MOV.B   818,W0L
0E80:  SE      W0,W0
0E82:  CP      W0,#7
0E84:  BRA     NZ,E98
.................... 		arrayData[SM_id - 7] = c;	//DirPosX[0] 
0E86:  MOV.B   818,W0L
0E88:  SE      W0,W0
0E8A:  SUB     W0,#7,W5
0E8C:  MOV     #806,W4
0E8E:  ADD     W5,W4,W6
0E90:  MOV     844,W0
0E92:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0E94:  INC.B   0818
.................... 	}else if (SM_id > 7 && SM_id <= 9){ 
0E96:  BRA     FA6
0E98:  MOV.B   818,W0L
0E9A:  SE      W0,W0
0E9C:  CP      W0,#7
0E9E:  BRA     LE,EBA
0EA0:  MOV.B   818,W0L
0EA2:  SE      W0,W0
0EA4:  CP      W0,#9
0EA6:  BRA     GT,EBA
.................... 		arrayDataYI[SM_id - 8] = c;	//PosY 
0EA8:  MOV.B   818,W0L
0EAA:  SE      W0,W0
0EAC:  SUB     W0,#8,W5
0EAE:  MOV     #810,W4
0EB0:  ADD     W5,W4,W6
0EB2:  MOV     844,W0
0EB4:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0EB6:  INC.B   0818
.................... 	}else if (SM_id == 10){ 
0EB8:  BRA     FA6
0EBA:  MOV.B   818,W0L
0EBC:  SE      W0,W0
0EBE:  CP      W0,#A
0EC0:  BRA     NZ,ED4
.................... 		arrayData[SM_id - 9] = c;	//DirPosY[1] 
0EC2:  MOV.B   818,W0L
0EC4:  SE      W0,W0
0EC6:  SUB     W0,#9,W5
0EC8:  MOV     #806,W4
0ECA:  ADD     W5,W4,W6
0ECC:  MOV     844,W0
0ECE:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0ED0:  INC.B   0818
.................... 	}else if (SM_id > 10 && SM_id <= 12){ 
0ED2:  BRA     FA6
0ED4:  MOV.B   818,W0L
0ED6:  SE      W0,W0
0ED8:  CP      W0,#A
0EDA:  BRA     LE,EF6
0EDC:  MOV.B   818,W0L
0EDE:  SE      W0,W0
0EE0:  CP      W0,#C
0EE2:  BRA     GT,EF6
.................... 		arrayAng[SM_id - 11] = c;	//Ang 
0EE4:  MOV.B   818,W0L
0EE6:  SE      W0,W0
0EE8:  SUB     W0,#B,W5
0EEA:  MOV     #814,W4
0EEC:  ADD     W5,W4,W6
0EEE:  MOV     844,W0
0EF0:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0EF2:  INC.B   0818
.................... 	}else if (SM_id > 12 && SM_id <= 14){ 
0EF4:  BRA     FA6
0EF6:  MOV.B   818,W0L
0EF8:  SE      W0,W0
0EFA:  CP      W0,#C
0EFC:  BRA     LE,F18
0EFE:  MOV.B   818,W0L
0F00:  SE      W0,W0
0F02:  CP      W0,#E
0F04:  BRA     GT,F18
.................... 		arrayDataXII[SM_id - 13] = c;//goX 
0F06:  MOV.B   818,W0L
0F08:  SE      W0,W0
0F0A:  SUB     W0,#D,W5
0F0C:  MOV     #80E,W4
0F0E:  ADD     W5,W4,W6
0F10:  MOV     844,W0
0F12:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0F14:  INC.B   0818
.................... 	}else if (SM_id == 15){ 
0F16:  BRA     FA6
0F18:  MOV.B   818,W0L
0F1A:  SE      W0,W0
0F1C:  CP      W0,#F
0F1E:  BRA     NZ,F32
.................... 		arrayData[SM_id - 13] = c;	//goDir[2] 
0F20:  MOV.B   818,W0L
0F22:  SE      W0,W0
0F24:  SUB     W0,#D,W5
0F26:  MOV     #806,W4
0F28:  ADD     W5,W4,W6
0F2A:  MOV     844,W0
0F2C:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0F2E:  INC.B   0818
.................... 	}else if (SM_id > 15 && SM_id <= 17){ 
0F30:  BRA     FA6
0F32:  MOV.B   818,W0L
0F34:  SE      W0,W0
0F36:  CP      W0,#F
0F38:  BRA     LE,F54
0F3A:  MOV.B   818,W0L
0F3C:  SE      W0,W0
0F3E:  CP      W0,#11
0F40:  BRA     GT,F54
.................... 		arrayDataYII[SM_id - 16] = c;	//goY 
0F42:  MOV.B   818,W0L
0F44:  SE      W0,W0
0F46:  SUB     W0,#10,W5
0F48:  MOV     #812,W4
0F4A:  ADD     W5,W4,W6
0F4C:  MOV     844,W0
0F4E:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0F50:  INC.B   0818
.................... 	}else if (SM_id > 17 && SM_id <= 19){ 
0F52:  BRA     FA6
0F54:  MOV.B   818,W0L
0F56:  SE      W0,W0
0F58:  CP      W0,#11
0F5A:  BRA     LE,F76
0F5C:  MOV.B   818,W0L
0F5E:  SE      W0,W0
0F60:  CP      W0,#13
0F62:  BRA     GT,F76
.................... 		arrayData[SM_id - 15] = c;	//goDir[3,4] 
0F64:  MOV.B   818,W0L
0F66:  SE      W0,W0
0F68:  SUB     W0,#F,W5
0F6A:  MOV     #806,W4
0F6C:  ADD     W5,W4,W6
0F6E:  MOV     844,W0
0F70:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0F72:  INC.B   0818
.................... 	}else if (SM_id > 19 && SM_id <= 21){ 
0F74:  BRA     FA6
0F76:  MOV.B   818,W0L
0F78:  SE      W0,W0
0F7A:  CP      W0,#13
0F7C:  BRA     LE,FA6
0F7E:  MOV.B   818,W0L
0F80:  SE      W0,W0
0F82:  CP      W0,#15
0F84:  BRA     GT,FA6
.................... 		arrayAngGrip[SM_id - 20] = c;//Anggrip 
0F86:  MOV.B   818,W0L
0F88:  SE      W0,W0
0F8A:  SUB     W0,#14,W5
0F8C:  MOV     #816,W4
0F8E:  ADD     W5,W4,W6
0F90:  MOV     844,W0
0F92:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0F94:  INC.B   0818
.................... 		if(SM_id >= 22){ 
0F96:  MOV.B   818,W0L
0F98:  SE      W0,W0
0F9A:  CP      W0,#16
0F9C:  BRA     LT,FA6
.................... 			getPackage = 1; 
0F9E:  MOV     #1,W4
0FA0:  MOV     W4,81A
.................... 			SM_id = 1; 
0FA2:  MOV.B   #1,W0L
0FA4:  MOV.B   W0L,818
.................... 		} 
.................... 	} 
0FA6:  MOV     [--W15],W6
0FA8:  MOV     [--W15],W5
0FAA:  RETURN  
.................... } 
....................  
.................... #INT_RDA               // receive data interrupt one time per one  
.................... void UART1_Isr() { 
0FAC:  PUSH    42
0FAE:  PUSH    36
0FB0:  PUSH    32
0FB2:  MOV     W0,[W15++]
0FB4:  MOV     #2,W0
0FB6:  REPEAT  #C
0FB8:  MOV     [W0++],[W15++]
0FBA:  BTSS.B  222.0
0FBC:  BRA     FBA
0FBE:  MOV     226,W0
0FC0:  MOV.B   W0L,842
0FC2:  CLR.B   843
....................     int c = getc(); 
....................     SM_RxD(c); 
0FC4:  PUSH    842
0FC6:  POP     844
0FC8:  CALL    E10
0FCC:  BCLR.B  85.3
0FCE:  MOV     #1A,W0
0FD0:  REPEAT  #C
0FD2:  MOV     [--W15],[W0--]
0FD4:  MOV     [--W15],W0
0FD6:  POP     32
0FD8:  POP     36
0FDA:  POP     42
0FDC:  RETFIE  
.................... } 
....................  
....................  
.................... void servo_Top(int degress){ 
.................... 	if(degress <= 200){ 
*
1182:  MOV     836,W4
1184:  MOV     #C8,W3
1186:  CP      W3,W4
1188:  BRA     LT,11AC
.................... 		degress += 5; 
118A:  MOV     836,W4
118C:  ADD     W4,#5,W4
118E:  MOV     W4,836
.................... 		for(int i = 140;i <= degress;i++){ 
1190:  MOV     #8C,W4
1192:  MOV     W4,838
1194:  MOV     838,W0
1196:  MOV     836,W4
1198:  CP      W4,W0
119A:  BRA     LT,11AA
.................... 			set_pwm_duty(4, i); 
119C:  PUSH    838
119E:  POP     192
.................... 			delay_ms(20); 
11A0:  MOV     #14,W0
11A2:  CALL    1172
11A6:  INC     0838
11A8:  BRA     1194
.................... 		} 
.................... 	}else if(degress > 200 && degress < 350){ 
11AA:  BRA     1200
11AC:  MOV     836,W4
11AE:  MOV     #C8,W3
11B0:  CP      W3,W4
11B2:  BRA     GE,11DE
11B4:  MOV     836,W4
11B6:  MOV     #15E,W3
11B8:  CP      W3,W4
11BA:  BRA     LE,11DE
.................... 		degress -= 20; 
11BC:  MOV     836,W4
11BE:  SUB     W4,#14,W0
11C0:  MOV     W0,836
.................... 		for(int i = 200;i <= degress;i++){ 
11C2:  MOV     #C8,W4
11C4:  MOV     W4,83A
11C6:  MOV     83A,W0
11C8:  MOV     836,W4
11CA:  CP      W4,W0
11CC:  BRA     LT,11DC
.................... 			set_pwm_duty(4, i); 
11CE:  PUSH    83A
11D0:  POP     192
.................... 			delay_ms(20); 
11D2:  MOV     #14,W0
11D4:  CALL    1172
11D8:  INC     083A
11DA:  BRA     11C6
.................... 		} 
.................... 	}else if(degress >= 350){ 
11DC:  BRA     1200
11DE:  MOV     836,W4
11E0:  MOV     #15E,W3
11E2:  CP      W3,W4
11E4:  BRA     GT,1200
.................... 		for(int i = 350;i <= degress;i++){ 
11E6:  MOV     #15E,W4
11E8:  MOV     W4,83C
11EA:  MOV     83C,W0
11EC:  MOV     836,W4
11EE:  CP      W4,W0
11F0:  BRA     LT,1200
.................... 			set_pwm_duty(4, i); 
11F2:  PUSH    83C
11F4:  POP     192
.................... 			delay_ms(20); 
11F6:  MOV     #14,W0
11F8:  CALL    1172
11FC:  INC     083C
11FE:  BRA     11EA
.................... 		}	 
.................... 	} 
1200:  RETURN  
.................... } 
....................  
.................... void servo_Under(int degress, int time){ 
.................... 	if(time == 0){ 
.................... 		for(int i = 90;i <= degress;i++){ 
.................... 			set_pwm_duty(5, i); 
.................... 			delay_ms(20); 
.................... 		}	 
.................... 	}else if(time == 1){ 
.................... 		for(int i = 90;i <= degress;i++){ 
.................... 			set_pwm_duty(5, i); 
.................... 			delay_ms(100); 
.................... 		} 
.................... 	} 
.................... } 
....................  
.................... #INT_EXT0 
.................... void INT_EXT_INPUT0 (void) 
*
0FDE:  PUSH    42
0FE0:  PUSH    36
0FE2:  PUSH    32
0FE4:  MOV     W0,[W15++]
0FE6:  MOV     #2,W0
0FE8:  REPEAT  #C
0FEA:  MOV     [W0++],[W15++]
.................... {	 
.................... 		countX++; 
0FEC:  INC     0800
.................... } 
0FEE:  BCLR.B  84.0
0FF0:  MOV     #1A,W0
0FF2:  REPEAT  #C
0FF4:  MOV     [--W15],[W0--]
0FF6:  MOV     [--W15],W0
0FF8:  POP     32
0FFA:  POP     36
0FFC:  POP     42
0FFE:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1 (void) 
1000:  PUSH    42
1002:  PUSH    36
1004:  PUSH    32
1006:  MOV     W0,[W15++]
1008:  MOV     #2,W0
100A:  REPEAT  #C
100C:  MOV     [W0++],[W15++]
.................... {	 
.................... 		countY++; 
100E:  INC     0802
.................... } 
1010:  BCLR.B  86.4
1012:  MOV     #1A,W0
1014:  REPEAT  #C
1016:  MOV     [--W15],[W0--]
1018:  MOV     [--W15],W0
101A:  POP     32
101C:  POP     36
101E:  POP     42
1020:  RETFIE  
.................... #INT_EXT2 
.................... void INT_EXT_INPUT2 (void) 
1022:  PUSH    42
1024:  PUSH    36
1026:  PUSH    32
1028:  MOV     W0,[W15++]
102A:  MOV     #2,W0
102C:  REPEAT  #C
102E:  MOV     [W0++],[W15++]
.................... {	 
.................... 		countZ++; 
1030:  INC     0804
1032:  BCLR.B  87.5
1034:  MOV     #1A,W0
1036:  REPEAT  #C
1038:  MOV     [--W15],[W0--]
103A:  MOV     [--W15],W0
103C:  POP     32
103E:  POP     36
1040:  POP     42
1042:  RETFIE  
.................... } 
.................... void Init_Interrupts() 
.................... { 
.................... 	disable_interrupts(GLOBAL); 
1044:  BCLR.B  81.7
1046:  MOV     #E0,W4
1048:  MOV     W4,42
104A:  BSET.B  81.7
.................... 	 
.................... 	clear_interrupt(INT_RDA);   // recommend style coding to confirm everything clear before use 
104C:  REPEAT  #3
104E:  MOV     226,W0
1050:  BCLR.B  85.3
....................     enable_interrupts(INT_RDA); 
1052:  BSET.B  95.3
....................  
.................... 	enable_interrupts( INT_EXT0 ); 
1054:  BSET.B  94.0
.................... 	ext_int_edge( 0, L_TO_H ) ; 
1056:  BCLR.B  82.0
....................  
.................... 	enable_interrupts( INT_EXT1 ); 
1058:  BSET.B  96.4
.................... 	ext_int_edge( 1, L_TO_H ) ; 
105A:  BCLR.B  82.1
....................  
.................... 	enable_interrupts( INT_EXT2 ); 
105C:  BSET.B  97.5
.................... 	ext_int_edge( 2, L_TO_H ) ; 
105E:  BCLR.B  82.2
.................... 	 
.................... 	setup_timer2(TMR_INTERNAL | TMR_DIV_BY_64 ,5000); 
1060:  CLR     110
1062:  MOV     #1388,W4
1064:  MOV     W4,10C
1066:  MOV     #8020,W4
1068:  MOV     W4,110
.................... 	setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8 ,TIME_PERIOD); 
106A:  CLR     112
106C:  MOV     #7D0,W4
106E:  MOV     W4,10E
1070:  MOV     #8010,W4
1072:  MOV     W4,112
....................  
....................  
.................... 	enable_interrupts(GLOBAL); 
1074:  BCLR.B  81.7
1076:  CLR     42
1078:  BSET.B  81.7
107A:  RETURN  
....................  
.................... } 
....................  
.................... void main(){ 
*
1202:  MOV     #2780,W15
1204:  MOV     #27FF,W0
1206:  MOV     W0,20
1208:  NOP     
120A:  MOV     #4444,W0
120C:  MOV     W0,A8
120E:  BSET.B  81.7
1210:  MOV     #46,W0
1212:  MOV.B   W0L,742
1214:  MOV     #57,W0
1216:  MOV.B   W0L,742
1218:  BCLR.B  742.6
121A:  MOV     #63F,W0
121C:  MOV     W0,680
121E:  MOV     #3F03,W0
1220:  MOV     W0,682
1222:  MOV     #3F0C,W0
1224:  MOV     W0,6A4
1226:  MOV     #12,W0
1228:  MOV     W0,6C2
122A:  MOV     #1315,W0
122C:  MOV     W0,6C8
122E:  MOV     #14,W0
1230:  MOV     W0,6CA
1232:  MOV     #300,W0
1234:  MOV     W0,6CC
1236:  MOV     #1600,W0
1238:  MOV     W0,6CE
123A:  MOV     #46,W0
123C:  MOV.B   W0L,742
123E:  MOV     #57,W0
1240:  MOV.B   W0L,742
1242:  BSET.B  742.6
1244:  CLR     744
1246:  MOV     #8000,W4
1248:  MOV     W4,220
124A:  MOV     #400,W4
124C:  MOV     W4,222
124E:  BSET.B  220.3
1250:  MOV     #22,W4
1252:  MOV     W4,228
1254:  CLR     800
1256:  CLR     802
1258:  CLR     804
125A:  MOV.B   #1,W0L
125C:  MOV.B   W0L,818
125E:  CLR     81A
1260:  SETM    32C
1262:  CLR     806
1264:  CLR     808
1266:  CLR     80A
1268:  CLR     80C
126A:  CLR     80E
126C:  CLR     810
126E:  CLR     812
1270:  CLR     814
1272:  CLR     816
.................... 	Init_Interrupts(); 
1274:  CALL    1044
....................  
.................... 	setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
1278:  MOV     #E,W4
127A:  MOV     W4,184
.................... 	setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
127C:  MOV     #E,W4
127E:  MOV     W4,18A
.................... 	setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
1280:  MOV     #E,W4
1282:  MOV     W4,190
....................  
.................... 	setup_compare(4, COMPARE_PWM | COMPARE_TIMER2); 
1284:  MOV     #6,W4
1286:  MOV     W4,196
.................... 	setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
1288:  MOV     #6,W4
128A:  MOV     W4,19C
....................  
.................... 	int stateII = 0; 
.................... 	int stateAll =0; 
128C:  CLR     81C
128E:  CLR     81E
.................... 	while(TRUE){ 
.................... 			stateAll = 0; 
1290:  CLR     81E
.................... 			stateII = 0; 
1292:  CLR     81C
.................... 			countX = 0; 
1294:  CLR     800
.................... 			countY = 0; 
1296:  CLR     802
.................... 			countZ = 0; 
1298:  CLR     804
.................... 			if(stateII <=5){ 
129A:  MOV     81C,W4
129C:  CP      W4,#5
129E:  BRA     GT,12E2
.................... 				for(int i=0; i<=560;i++){ 
12A0:  CLR     820
12A2:  MOV     820,W4
12A4:  MOV     #230,W3
12A6:  CP      W3,W4
12A8:  BRA     LT,12E0
.................... 				set_pwm_duty(4, i); 
12AA:  PUSH    820
12AC:  POP     192
.................... 				printf("i : %d\n",i); 
12AE:  MOV     #0,W1
12B0:  MOV     W1,W0
12B2:  CLR.B   1
12B4:  CALL    DFC
12B8:  INC     W1,W1
12BA:  BTSC.B  223.1
12BC:  BRA     12BA
12BE:  MOV     W0,224
12C0:  MOV     #3,W0
12C2:  CPSGT   W1,W0
12C4:  BRA     12B0
12C6:  MOV     820,W0
12C8:  MOV     #0,W4
12CA:  CALL    107C
12CE:  BTSC.B  223.1
12D0:  BRA     12CE
12D2:  MOV     #A,W4
12D4:  MOV     W4,224
.................... 				delay_ms(1000); 
12D6:  MOV     #3E8,W0
12D8:  CALL    1172
12DC:  INC     0820
12DE:  BRA     12A2
.................... 				}stateII++; 
12E0:  INC     081C
.................... 			} 
.................... 		int bagPosX, bagPosY, angle, goPosX, goPosY, angleGrip; 
.................... 		if (getPackage >= 1){ 
12E2:  MOV     81A,W4
12E4:  CP      W4,#1
12E6:  BRA     LT,1322
.................... 			getPackage = 0; 
12E8:  CLR     81A
.................... 			memcpy(&bagPosX, arrayDataXI, sizeof(bagPosX)); 
12EA:  MOV     #822,W1
12EC:  MOV     #80C,W2
12EE:  REPEAT  #1
12F0:  MOV.B   [W2++],[W1++]
.................... 			memcpy(&bagPosY, arrayDataYI, sizeof(bagPosY)); 
12F2:  MOV     #824,W1
12F4:  MOV     #810,W2
12F6:  REPEAT  #1
12F8:  MOV.B   [W2++],[W1++]
.................... 			memcpy(&angle, arrayAng, sizeof(angle)); 
12FA:  MOV     #826,W1
12FC:  MOV     #814,W2
12FE:  REPEAT  #1
1300:  MOV.B   [W2++],[W1++]
.................... 			memcpy(&goPosX, arrayDataXII, sizeof(goPosX)); 
1302:  MOV     #828,W1
1304:  MOV     #80E,W2
1306:  REPEAT  #1
1308:  MOV.B   [W2++],[W1++]
.................... 			memcpy(&goPosY, arrayDataYII, sizeof(goPosY)); 
130A:  MOV     #82A,W1
130C:  MOV     #812,W2
130E:  REPEAT  #1
1310:  MOV.B   [W2++],[W1++]
.................... 			memcpy(&angleGrip, arrayAngGrip, sizeof(angleGrip)); 
1312:  MOV     #82C,W1
1314:  MOV     #816,W2
1316:  REPEAT  #1
1318:  MOV.B   [W2++],[W1++]
.................... 			servo_Top(angleGrip); 
131A:  PUSH    82C
131C:  POP     836
131E:  CALL    1182
.................... 		}	 
1322:  BRA     1290
.................... 	} 
.................... } 
....................  
1324:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
