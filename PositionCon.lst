CCS PCD C Compiler, Version 5.015, 5967               29-Oct-18 16:02

               Filename:   C:\Users\thipawan\Desktop\Embedded\MilestoneIII\MPIDE\PositionCon.lst

               ROM used:   2402 bytes (7%)
                           Largest free fragment is 28314
               RAM used:   320 (4%) at main() level
                           350 (4%) worst case
               Stack size: 128

*
0C00:  GOTO    13D8
*
0C24:  GOTO    E10
*
0C74:  GOTO    E3A
*
0C98:  GOTO    E64
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    58,20,00
0E0A:  DATA    3A,20,00
0E0C:  DATA    25,64,00
0E0E:  DATA    0A,00,00
*
0EB4:  MOV     W5,[W15++]
0EB6:  MOV     #C,W5
0EB8:  REPEAT  #3
0EBA:  MOV     [W5++],[W15++]
0EBC:  MOV     W0,W4
0EBE:  MOV     W1,W5
0EC0:  MOV     W2,W6
0EC2:  MOV     W3,W7
0EC4:  CLR     W0
0EC6:  CLR     W1
0EC8:  CLR     W2
0ECA:  CLR     W3
0ECC:  BCLR    W8.0
0ECE:  BTSS    W7.F
0ED0:  BRA     EDC
0ED2:  BSET    W8.0
0ED4:  NEG     W4,W4
0ED6:  COM     W5,W5
0ED8:  COM     W6,W6
0EDA:  COM     W7,W7
0EDC:  IOR      W4,  W5,W9
0EDE:  BRA     NZ,EE4
0EE0:  IOR      W6,  W7,W9
0EE2:  BRA     Z,F0E
0EE4:  MOV     #473,W9
0EE6:  BTSC    W3.4
0EE8:  BRA     F00
0EEA:  BCLR.B  42.0
0EEC:  RLC     W4,W4
0EEE:  RLC     W5,W5
0EF0:  RLC     W6,W6
0EF2:  RLC     W7,W7
0EF4:  RLC     W0,W0
0EF6:  RLC     W1,W1
0EF8:  RLC     W2,W2
0EFA:  RLC     W3,W3
0EFC:  DEC     W9,W9
0EFE:  BRA     NZ,EE6
0F00:  SL      W9,#4,W9
0F02:  BCLR.B  42.0
0F04:  BCLR    W9.F
0F06:  BCLR    W3.4
0F08:  XOR     W9,W3,W3
0F0A:  BTSC    W8.0
0F0C:  BSET    W3.F
0F0E:  MOV     #12,W5
0F10:  REPEAT  #3
0F12:  MOV     [--W15],[W5--]
0F14:  MOV     [--W15],W5
0F16:  RETURN  
0F18:  MOV     W8,[W15++]
0F1A:  MOV     #12,W8
0F1C:  REPEAT  #4
0F1E:  MOV     [W8++],[W15++]
0F20:  XOR     W3,W7,W13
0F22:  MOV     W3,W8
0F24:  MOV     W7,W9
0F26:  MOV     #7FF,W10
0F28:  BCLR.B  42.0
0F2A:  BCLR.B  42.1
0F2C:  ASR     W8,#4,W8
0F2E:  AND     W10,W8,W8
0F30:  CP0     W8
0F32:  BRA     Z,100C
0F34:  BCLR.B  42.0
0F36:  BCLR.B  42.1
0F38:  ASR     W9,#4,W9
0F3A:  AND     W10,W9,W9
0F3C:  CP0     W9
0F3E:  BRA     Z,100C
0F40:  CLR     W10
0F42:  SUB     W8,W9,W12
0F44:  BRA     NC,F4C
0F46:  ADD     #3FF,W12
0F48:  BRA     C,100C
0F4A:  BRA     F54
0F4C:  MOV     #401,W11
0F4E:  SUB     W12,W11,W12
0F50:  BRA     NC,100C
0F52:  BRA     Z,100C
0F54:  CLR     W8
0F56:  CLR     W9
0F58:  CLR     W10
0F5A:  CLR     W11
0F5C:  AND     #1F,W3
0F5E:  BSET    W3.4
0F60:  AND     #1F,W7
0F62:  BSET    W7.4
0F64:  MOV     W12,[W15++]
0F66:  MOV     #36,W12
0F68:  SUB     W0,W4,W0
0F6A:  SUBB    W1,W5,W1
0F6C:  SUBB    W2,W6,W2
0F6E:  SUBB    W3,W7,W3
0F70:  BRA     N,F76
0F72:  BRA     C,F80
0F74:  BRA     NZ,F82
0F76:  ADD     W0,W4,W0
0F78:  ADDC    W1,W5,W1
0F7A:  ADDC    W2,W6,W2
0F7C:  ADDC    W3,W7,W3
0F7E:  BRA     F82
0F80:  BSET    W8.0
0F82:  DEC     W12,W12
0F84:  BRA     Z,F9C
0F86:  BCLR.B  42.0
0F88:  RLC     W0,W0
0F8A:  RLC     W1,W1
0F8C:  RLC     W2,W2
0F8E:  RLC     W3,W3
0F90:  BCLR.B  42.0
0F92:  RLC     W8,W8
0F94:  RLC     W9,W9
0F96:  RLC     W10,W10
0F98:  RLC     W11,W11
0F9A:  BRA     F68
0F9C:  MOV     [--W15],W12
0F9E:  BTSC    W11.5
0FA0:  BRA     FA4
0FA2:  BRA     FB0
0FA4:  BCLR.B  42.0
0FA6:  RRC     W11,W11
0FA8:  RRC     W10,W10
0FAA:  RRC     W9,W9
0FAC:  RRC     W8,W8
0FAE:  BRA     FB6
0FB0:  DEC     W12,W12
0FB2:  BCLR.B  42.0
0FB4:  BRA     Z,100C
0FB6:  BTSC.B  42.0
0FB8:  BRA     FCC
0FBA:  RLC     W0,W0
0FBC:  RLC     W1,W1
0FBE:  RLC     W2,W2
0FC0:  RLC     W3,W3
0FC2:  SUB     W0,W4,W4
0FC4:  SUBB    W1,W5,W5
0FC6:  SUBB    W2,W6,W6
0FC8:  SUBB    W3,W7,W7
0FCA:  BRA     NC,FF6
0FCC:  INC     W8,W8
0FCE:  BRA     NZ,FF6
0FD0:  INC     W9,W9
0FD2:  BRA     NZ,FF6
0FD4:  INC     W10,W10
0FD6:  BRA     NZ,FF6
0FD8:  INC     W11,W11
0FDA:  BRA     NZ,FF6
0FDC:  INC     W12,W12
0FDE:  BRA     Z,100C
0FE0:  BRA     FF6
0FE2:  DEC     W12,W12
0FE4:  BRA     Z,100C
0FE6:  BTSC    W11.4
0FE8:  BRA     FF6
0FEA:  BCLR.B  42.0
0FEC:  RLC     W8,W8
0FEE:  RLC     W9,W9
0FF0:  RLC     W10,W10
0FF2:  RLC     W11,W11
0FF4:  BRA     FE6
0FF6:  SL      W12,#4,W12
0FF8:  BCLR.B  42.0
0FFA:  BCLR    W12.F
0FFC:  BTSC    W13.F
0FFE:  BSET    W12.F
1000:  BCLR    W11.4
1002:  XOR     W12,W11,W3
1004:  MOV     W10,W2
1006:  MOV     W9,W1
1008:  MOV     W8,W0
100A:  BRA     1016
100C:  MOV     #0,W0
100E:  MOV     #0,W1
1010:  MOV     #0,W2
1012:  MOV     #0,W3
1014:  BRA     1016
1016:  MOV     #1A,W8
1018:  REPEAT  #4
101A:  MOV     [--W15],[W8--]
101C:  MOV     [--W15],W8
101E:  RETURN  
1020:  MOV     W8,[W15++]
1022:  MOV     #12,W8
1024:  REPEAT  #4
1026:  MOV     [W8++],[W15++]
1028:  CLR     W11
102A:  MUL.UU  W12,#0,W12
102C:  MOV     W3,W8
102E:  MOV     W7,W9
1030:  MOV     #7FF,W10
1032:  BCLR.B  42.0
1034:  BCLR.B  42.1
1036:  ASR     W8,#4,W8
1038:  AND     W10,W8,W8
103A:  CP0     W8
103C:  BRA     Z,1120
103E:  BCLR.B  42.0
1040:  BCLR.B  42.1
1042:  ASR     W9,#4,W9
1044:  AND     W10,W9,W9
1046:  CP0     W9
1048:  BRA     Z,1120
104A:  ADD     W9,W8,W8
104C:  BTSC    W9.B
104E:  BRA     1058
1050:  SUB     #3FF,W8
1052:  BRA     Z,1120
1054:  BRA     NC,1120
1056:  BRA     105E
1058:  MOV     #401,W10
105A:  ADD.B   W10L,W5L,W5L
105C:  BRA     C,1120
105E:  XOR     W3,W7,W13
1060:  BCLR.B  42.0
1062:  BCLR.B  42.1
1064:  AND     #F,W3
1066:  BSET    W3.4
1068:  AND     #F,W7
106A:  BSET    W7.4
106C:  MOV     W8,[W15++]
106E:  MUL.UU  W4,W1,W8
1070:  MUL.UU  W5,W0,W10
1072:  ADD     W8,W10,W10
1074:  ADDC    W9,W11,W11
1076:  ADDC    #0,W12
1078:  MUL.UU  W4,W2,W8
107A:  ADD     W8,W11,W11
107C:  ADDC    W9,W12,W12
107E:  MUL.UU  W5,W1,W8
1080:  CLR     W10
1082:  ADD     W8,W11,W11
1084:  ADDC    W9,W12,W12
1086:  ADDC    #0,W10
1088:  MUL.UU  W6,W0,W8
108A:  ADD     W8,W11,W11
108C:  ADDC    W9,W12,W12
108E:  ADDC    #0,W10
1090:  CLR     W11
1092:  MUL.UU  W4,W3,W8
1094:  ADD     W8,W12,W12
1096:  ADDC    W9,W10,W10
1098:  ADDC    #0,W11
109A:  MUL.UU  W5,W2,W8
109C:  ADD     W8,W12,W12
109E:  ADDC    W9,W10,W10
10A0:  ADDC    #0,W11
10A2:  MUL.UU  W6,W1,W8
10A4:  ADD     W8,W12,W12
10A6:  ADDC    W9,W10,W10
10A8:  ADDC    #0,W11
10AA:  MUL.UU  W7,W0,W8
10AC:  ADD     W8,W12,W12
10AE:  ADDC    W9,W10,W10
10B0:  ADDC    #0,W11
10B2:  MOV     W12,W0
10B4:  CLR     W12
10B6:  MUL.UU  W5,W3,W8
10B8:  ADD     W8,W10,W10
10BA:  ADDC    W9,W11,W11
10BC:  ADDC    #0,W12
10BE:  MUL.UU  W6,W2,W8
10C0:  ADD     W8,W10,W10
10C2:  ADDC    W9,W11,W11
10C4:  ADDC    #0,W12
10C6:  MUL.UU  W6,W3,W8
10C8:  ADD     W8,W11,W11
10CA:  ADDC    W9,W12,W12
10CC:  MUL.UU  W7,W1,W8
10CE:  ADD     W8,W10,W10
10D0:  ADDC    W9,W11,W11
10D2:  ADDC    #0,W12
10D4:  MUL.UU  W7,W2,W8
10D6:  ADD     W8,W11,W11
10D8:  ADDC    W9,W12,W12
10DA:  MUL.UU  W7,W3,W8
10DC:  ADD     W8,W12,W12
10DE:  MOV     W10,W1
10E0:  MOV     W11,W2
10E2:  MOV     W12,W3
10E4:  MOV     #5,W4
10E6:  BCLR.B  42.0
10E8:  RRC     W3,W3
10EA:  RRC     W2,W2
10EC:  RRC     W1,W1
10EE:  RRC     W0,W0
10F0:  DEC     W4,W4
10F2:  BRA     NZ,10E6
10F4:  MOV     [--W15],W8
10F6:  INC     W8,W8
10F8:  IOR      W0,  W1,W6
10FA:  BRA     Z,10FE
10FC:  BRA     1102
10FE:  IOR      W2,  W3,W6
1100:  BRA     Z,1112
1102:  BTSC    W3.4
1104:  BRA     1112
1106:  BCLR.B  42.0
1108:  RLC     W0,W0
110A:  RLC     W1,W1
110C:  RLC     W2,W2
110E:  RLC     W3,W3
1110:  DEC     W8,W8
1112:  SL      W8,#4,W8
1114:  BCLR    W3.F
1116:  BTSC    W13.F
1118:  BSET    W3.F
111A:  BCLR    W3.4
111C:  XOR     W8,W3,W3
111E:  BRA     1126
1120:  MUL.UU  W0,#0,W0
1122:  MUL.UU  W0,#0,W2
1124:  BRA     1126
1126:  MOV     #1A,W8
1128:  REPEAT  #4
112A:  MOV     [--W15],[W8--]
112C:  MOV     [--W15],W8
112E:  RETURN  
1130:  MOV     W5,[W15++]
1132:  MOV     #C,W5
1134:  REPEAT  #5
1136:  MOV     [W5++],[W15++]
1138:  MOV     W3,W8
113A:  MOV     W2,W7
113C:  MOV     W1,W6
113E:  MOV     W0,W5
1140:  MOV     W3,W9
1142:  MOV     #473,W11
1144:  ASR     W3,#4,W3
1146:  MOV     #7FF,W10
1148:  AND     W10,W3,W3
114A:  SUB     W11,W3,W11
114C:  AND     #1F,W8
114E:  BSET    W8.4
1150:  CLR     W0
1152:  CLR     W1
1154:  CLR     W2
1156:  CLR     W3
1158:  BCLR.B  42.0
115A:  RRC     W8,W8
115C:  RRC     W7,W7
115E:  RRC     W6,W6
1160:  RRC     W5,W5
1162:  RRC     W3,W3
1164:  RRC     W2,W2
1166:  RRC     W1,W1
1168:  RRC     W0,W0
116A:  DEC     W11,W11
116C:  BRA     NZ,1158
116E:  BTSS    W9.F
1170:  BRA     117C
1172:  NEG     W0,W0
1174:  COM     W1,W1
1176:  COM     W2,W2
1178:  COM     W3,W3
117A:  BRA     117C
117C:  MOV     #16,W5
117E:  REPEAT  #5
1180:  MOV     [--W15],[W5--]
1182:  MOV     [--W15],W5
1184:  RETURN  
*
12E2:  MOV     W5,[W15++]
12E4:  MOV     #C,W5
12E6:  REPEAT  #3
12E8:  MOV     [W5++],[W15++]
12EA:  BTSS    W0.F
12EC:  BRA     1306
12EE:  NEG     W0,W0
12F0:  BSET    W4.8
12F2:  BTSS    W4.F
12F4:  BRA     1306
12F6:  MOV     W0,[W15++]
12F8:  MOV     #2D,W0
12FA:  BTSC.B  223.1
12FC:  BRA     12FA
12FE:  MOV     W0,224
1300:  MOV     [--W15],W0
1302:  BCLR    W4.8
1304:  DEC.B   0008
1306:  CLR     W5
1308:  MOV     W0,W7
130A:  MOV     W4,W9
130C:  BCLR    W4.F
130E:  CP0.B   W4L
1310:  BRA     NZ,131E
1312:  BTSC    W9.F
1314:  BRA     131A
1316:  MOV     #0,W5
1318:  BRA     1338
131A:  MOV     #0,W5
131C:  BRA     1338
131E:  SUB.B   W4L,#6,W5L
1320:  BRA     NC,1336
1322:  MOV     #30,W0
1324:  BTSS    W9.F
1326:  MOV     #20,W0
1328:  BTSC.B  223.1
132A:  BRA     1328
132C:  MOV     W0,224
132E:  DEC     W5,W5
1330:  BRA     NN,1328
1332:  MOV     #5,W5
1334:  BRA     1338
1336:  MOV     W4,W5
1338:  MOV     #6,W4
133A:  BTSC    W5.8
133C:  INC     W4,W4
133E:  BSET    W5.E
1340:  BTSC    W9.F
1342:  BSET    W5.F
1344:  MOV     #2710,W8
1346:  REPEAT  #11
1348:  DIV.U   W7,W8
134A:  CALL    138E
134E:  MOV     W1,W7
1350:  MOV     #3E8,W8
1352:  REPEAT  #11
1354:  DIV.U   W7,W8
1356:  CALL    138E
135A:  MOV     W1,W7
135C:  MOV     #64,W8
135E:  REPEAT  #11
1360:  DIV.U   W7,W8
1362:  CALL    138E
1366:  MOV     W1,W7
1368:  MOV     #A,W8
136A:  REPEAT  #11
136C:  DIV.U   W7,W8
136E:  CALL    138E
1372:  BTSS    W9.8
1374:  BRA     1380
1376:  MOV     #2D,W0
1378:  BTSC.B  223.1
137A:  BRA     1378
137C:  MOV     W0,224
137E:  BCLR    W9.8
1380:  MOV     #30,W0
1382:  ADD.B   W1L,W0L,W0L
1384:  MOV     W0,2A
1386:  BTSC.B  223.1
1388:  BRA     1386
138A:  MOV     W0,224
138C:  BRA     13CE
138E:  MOV     #30,W6
1390:  CP0     W0
1392:  BRA     NZ,13B0
1394:  BTSS    W5.E
1396:  BRA     13C4
1398:  DEC     W4,W4
139A:  CP.B    W4L,W5L
139C:  BRA     Z,13A2
139E:  BTSC.B  42.0
13A0:  RETURN  
13A2:  CP0     W0
13A4:  BRA     NZ,13B0
13A6:  BTSS    W5.E
13A8:  BRA     13C4
13AA:  BTSS    W5.F
13AC:  MOV     #20,W6
13AE:  BRA     13C4
13B0:  BCLR    W5.E
13B2:  BTSS    W9.8
13B4:  BRA     13C4
13B6:  MOV     W0,W10
13B8:  MOV     #2D,W0
13BA:  BTSC.B  223.1
13BC:  BRA     13BA
13BE:  MOV     W0,224
13C0:  BCLR    W9.8
13C2:  MOV     W10,W0
13C4:  ADD.B   W6L,W0L,W0L
13C6:  BTSC.B  223.1
13C8:  BRA     13C6
13CA:  MOV     W0,224
13CC:  RETURN  
13CE:  MOV     #12,W5
13D0:  REPEAT  #3
13D2:  MOV     [--W15],[W5--]
13D4:  MOV     [--W15],W5
13D6:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay (internal = 8 MHz, clock = 32MHz) 
.................... #PIN_SELECT U1RX = PIN_B12 //PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 //PIN_B15 // 
.................... #use rs232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #define TIME_PERIOD 2000 
.................... #define tolerance 24 
....................  
.................... #define servoI   PIN_B14 
.................... #define	servoII  PIN_B15 
....................  
.................... #define	lim_SW_X PIN_B4 //10 
.................... #define lim_SW_Y PIN_B4 
.................... #define lim_SW_Z PIN_B5 
....................  
.................... #define motorXI  PIN_B0  
.................... #define motorXII PIN_B1 
.................... #define ena_X    PIN_B2  
.................... //Encoder X is INT0 PIN_B7 
....................  
.................... #define	motorYI  PIN_A2 
.................... #define motorYII PIN_A4 
.................... #define ena_Y    PIN_B9 
.................... #define	encodeY  PIN_B6 
....................  
.................... #define	motorZI  PIN_A0 //B1 
.................... #define motorZII PIN_A1 //B10 
.................... #define ena_Z    PIN_B8 
.................... #define	encodeZ  PIN_B3 
.................... #define position 1 //receive from python for direction of Motor. if 1 = unti-clockwise 
....................  
.................... #PIN_SELECT INT1 = encodeY //EncoderY 
.................... #PIN_SELECT INT2 = encodeZ //EncoderZ 
.................... #PIN_SELECT OC1 =  ena_X   
.................... #PIN_SELECT OC2 =  ena_Y 
.................... #PIN_SELECT OC3 =  ena_Z 
.................... #PIN_SELECT OC4 =  servoI 
.................... #PIN_SELECT OC5 =  servoII 
....................  
.................... int countX = 0; 
.................... int countY = 0; 
.................... int countZ = 0;  
.................... int stateEncode_X = 0; 
.................... int stateEncode_Y = 0; 
.................... int stateEncode_Z = 0; 
.................... int stateSWII = 0; 
.................... int state = 0; 
....................  
.................... void control_inputX(int input, int direc){ 
*
1186:  MOV     W5,[W15++]
1188:  MOV     W6,[W15++]
118A:  MOV     W7,[W15++]
118C:  MOV     W8,[W15++]
.................... 	if(direc == 0){ 
118E:  CP0     8CE
1190:  BRA     NZ,1210
.................... 		if(input >= 743 ){ 
1192:  MOV     8CC,W4
1194:  MOV     #2E7,W3
1196:  CP      W3,W4
1198:  BRA     GT,11A8
.................... 			set_pwm_duty(1, 2000); 
119A:  MOV     #7D0,W4
119C:  MOV     W4,180
.................... 			output_bit(motorXI,1); //if 0, IN2->AXI@2 = clockwise  
119E:  BSET.B  2CC.0
11A0:  BCLR.B  2C8.0
.................... 			output_bit(motorXII,0); 
11A2:  BCLR.B  2CC.1
11A4:  BCLR.B  2C8.1
.................... 		}else if(input > 0 ){ 
11A6:  BRA     120E
11A8:  MOV     8CC,W4
11AA:  CP      W4,#0
11AC:  BRA     LE,1204
.................... 			set_pwm_duty(1, (int)((input/743.0f)*2000)); 
11AE:  MOV     8CC,W0
11B0:  CLR     W3
11B2:  BTSC    W0.F
11B4:  SETM    W3
11B6:  MOV     W3,W1
11B8:  MOV     W3,W2
11BA:  CALL    EB4
11BE:  MOV     #0,W4
11C0:  MOV     #0,W5
11C2:  MOV     #3800,W6
11C4:  MOV     #4087,W7
11C6:  CALL    F18
11CA:  MOV     W0,W5
11CC:  MOV     W1,W6
11CE:  MOV     W2,W7
11D0:  MOV     W3,W8
11D2:  MOV     W5,[W15++]
11D4:  MOV     W6,[W15++]
11D6:  MOV     W7,[W15++]
11D8:  MOV     W5,W0
11DA:  MOV     W6,W1
11DC:  MOV     W7,W2
11DE:  MOV     W8,W3
11E0:  MOV     #0,W4
11E2:  MOV     #0,W5
11E4:  MOV     #4000,W6
11E6:  MOV     #409F,W7
11E8:  CALL    1020
11EC:  MOV     [--W15],W7
11EE:  MOV     [--W15],W6
11F0:  MOV     [--W15],W5
11F2:  CALL    1130
11F6:  MOV     W0,W5
11F8:  MOV     W5,180
.................... 			output_bit(motorXI,1); //if 0, IN2->AXI@2 = clockwise  
11FA:  BSET.B  2CC.0
11FC:  BCLR.B  2C8.0
.................... 			output_bit(motorXII,0); 
11FE:  BCLR.B  2CC.1
1200:  BCLR.B  2C8.1
.................... 		}else{ 
1202:  BRA     120E
.................... 			set_pwm_duty(1, 0); 
1204:  CLR     180
.................... 			output_bit(motorXI,0); 
1206:  BCLR.B  2CC.0
1208:  BCLR.B  2C8.0
.................... 			output_bit(motorXII,0); 
120A:  BCLR.B  2CC.1
120C:  BCLR.B  2C8.1
.................... 			} 
.................... 	}	 
120E:  BRA     1292
.................... 	else if(direc == 1){ 
1210:  MOV     8CE,W4
1212:  CP      W4,#1
1214:  BRA     NZ,1292
.................... 		if(input >= 743 ){ 
1216:  MOV     8CC,W4
1218:  MOV     #2E7,W3
121A:  CP      W3,W4
121C:  BRA     GT,122C
.................... 			set_pwm_duty(1, 2000); 
121E:  MOV     #7D0,W4
1220:  MOV     W4,180
.................... 			output_bit(motorXI,0); //if 0, IN2->AXI@2 = clockwise  
1222:  BCLR.B  2CC.0
1224:  BCLR.B  2C8.0
.................... 			output_bit(motorXII,1); 
1226:  BSET.B  2CC.1
1228:  BCLR.B  2C8.1
.................... 		}else if(input > 0 ){ 
122A:  BRA     1292
122C:  MOV     8CC,W4
122E:  CP      W4,#0
1230:  BRA     LE,1288
.................... 			set_pwm_duty(1, (int)((input/743.0f)*2000)); 
1232:  MOV     8CC,W0
1234:  CLR     W3
1236:  BTSC    W0.F
1238:  SETM    W3
123A:  MOV     W3,W1
123C:  MOV     W3,W2
123E:  CALL    EB4
1242:  MOV     #0,W4
1244:  MOV     #0,W5
1246:  MOV     #3800,W6
1248:  MOV     #4087,W7
124A:  CALL    F18
124E:  MOV     W0,W5
1250:  MOV     W1,W6
1252:  MOV     W2,W7
1254:  MOV     W3,W8
1256:  MOV     W5,[W15++]
1258:  MOV     W6,[W15++]
125A:  MOV     W7,[W15++]
125C:  MOV     W5,W0
125E:  MOV     W6,W1
1260:  MOV     W7,W2
1262:  MOV     W8,W3
1264:  MOV     #0,W4
1266:  MOV     #0,W5
1268:  MOV     #4000,W6
126A:  MOV     #409F,W7
126C:  CALL    1020
1270:  MOV     [--W15],W7
1272:  MOV     [--W15],W6
1274:  MOV     [--W15],W5
1276:  CALL    1130
127A:  MOV     W0,W5
127C:  MOV     W5,180
.................... 			output_bit(motorXI,0); //if 0, IN2->AXI@2 = clockwise  
127E:  BCLR.B  2CC.0
1280:  BCLR.B  2C8.0
.................... 			output_bit(motorXII,1); 
1282:  BSET.B  2CC.1
1284:  BCLR.B  2C8.1
.................... 		}else{ 
1286:  BRA     1292
.................... 			set_pwm_duty(1, 0); 
1288:  CLR     180
.................... 			output_bit(motorXI,0); 
128A:  BCLR.B  2CC.0
128C:  BCLR.B  2C8.0
.................... 			output_bit(motorXII,0); 
128E:  BCLR.B  2CC.1
1290:  BCLR.B  2C8.1
.................... 		} 
.................... 	}		 
1292:  MOV     [--W15],W8
1294:  MOV     [--W15],W7
1296:  MOV     [--W15],W6
1298:  MOV     [--W15],W5
129A:  RETURN  
.................... } 
....................  
....................  
.................... void control_inputY(int input, int direc){ 
.................... 	 
.................... if(direc == 0){ 
.................... 		if(input >= 743 ){ 
.................... 			set_pwm_duty(2, 2000); 
.................... 			output_bit(motorYI,1); //if 0, IN2->AXI@2 = clockwise  
.................... 			output_bit(motorYII,0); 
.................... 		}else if(input > 0 ){ 
.................... 			set_pwm_duty(2, (int)((input/743.0f)*2000)); 
.................... 			output_bit(motorYI,1); //if 0, IN2->AXI@2 = clockwise  
.................... 			output_bit(motorYII,0); 
.................... 		}else{ 
.................... 			set_pwm_duty(2, 0); 
.................... 			output_bit(motorYI,0); 
.................... 			output_bit(motorYII,0); 
.................... 			} 
.................... 	}	 
.................... 	else if(direc == 1){ 
.................... 		if(input >= 743 ){ 
.................... 			set_pwm_duty(2, 2000); 
.................... 			output_bit(motorYI,0); //if 0, IN2->AXI@2 = clockwise  
.................... 			output_bit(motorYII,1); 
.................... 		}else if(input > 0 ){ 
.................... 			set_pwm_duty(2, (int)((input/743.0f)*2000)); 
.................... 			output_bit(motorYI,0); //if 0, IN2->AXI@2 = clockwise  
.................... 			output_bit(motorYII,1); 
.................... 		}else{ 
.................... 			set_pwm_duty(2, 0); 
.................... 			output_bit(motorYI,0); 
.................... 			output_bit(motorYII,0); 
.................... 			 
.................... 		}		 
.................... 	} 
.................... } 
....................  
.................... void control_inputZ(int input, int direc){ 
.................... 	if(direc == 0){ 
.................... 		if(input >= 743 ){ 
.................... 			set_pwm_duty(3, 2000); 
.................... 			output_bit(motorZI,1); //if 0, IN2->AXI@2 = clockwise  
.................... 			output_bit(motorZII,0); 
.................... 		}else if(input > 3 ){ 
.................... 			set_pwm_duty(1, (int)((input/743.0f)*2000)); 
.................... 			output_bit(motorZI,1); //if 0, IN2->AXI@2 = clockwise  
.................... 			output_bit(motorZII,0); 
.................... 		}else{ 
.................... 			set_pwm_duty(3, 0);				 
.................... 			output_bit(motorZI,0); 
.................... 			output_bit(motorZII,0); 
.................... 				} 
.................... 	}	 
.................... 	else if(direc == 1){ 
.................... 		if(input >= 743 ){ 
.................... 			set_pwm_duty(3, 2000); 
.................... 			output_bit(motorZI,0); //if 0, IN2->AXI@2 = clockwise  
.................... 			output_bit(motorZII,1); 
.................... 		}else if(input > 0 ){ 
.................... 			set_pwm_duty(3, (int)((input/743.0f)*2000)); 
.................... 			output_bit(motorZI,0); //if 0, IN2->AXI@2 = clockwise  
.................... 			output_bit(motorZII,1); 
.................... 		}else{ 
.................... 			set_pwm_duty(3, 0); 
.................... 			output_bit(motorZI,0); 
.................... 			output_bit(motorZII,0); 
.................... 				 
.................... 			}		 
.................... 		} 
.................... 	} 
....................  
.................... void move_posX(int pulse_x, int direc){ 
129C:  MOV     W5,[W15++]
129E:  MOV     #1,W4
12A0:  MOV     W4,8C4
.................... 	int check = 1; 
.................... 	while(check == 1){ 
12A2:  MOV     8C4,W4
12A4:  CP      W4,#1
12A6:  BRA     NZ,12DE
.................... 		int error = pulse_x - countX; 
12A8:  MOV     8C0,W4
12AA:  MOV     8B0,W3
12AC:  SUB     W4,W3,W0
12AE:  MOV     W0,8C6
.................... 		if(abs(error) <= tolerance){ 
12B0:  MOV     8C6,W0
12B2:  BTSS    W0.F
12B4:  BRA     12BC
12B6:  MOV     #0,W4
12B8:  MOV     8C6,W3
12BA:  SUB     W4,W3,W0
12BC:  MOV     W0,W5
12BE:  CP      W5,#18
12C0:  BRA     GT,12D0
.................... 			control_inputX(0,direc); 
12C2:  CLR     8CC
12C4:  PUSH    8C2
12C6:  POP     8CE
12C8:  CALL    1186
.................... 			check = 0;	 
12CC:  CLR     8C4
.................... 		}else{ 
12CE:  BRA     12DC
.................... 		//	if(stateSWII == 0){ 
.................... 			control_inputX(error, direc);  
12D0:  PUSH    8C6
12D2:  POP     8CC
12D4:  PUSH    8C2
12D6:  POP     8CE
12D8:  CALL    1186
.................... 		//	}check = 0; 
.................... 		} 
12DC:  BRA     12A2
.................... 	} 
12DE:  MOV     [--W15],W5
12E0:  RETURN  
.................... } 
....................  
.................... void move_posY(int pulse_y, int direc){ 
.................... 	int check = 1; 
.................... 	while(check == 1){ 
.................... 		int error = pulse_y - countY; 
.................... 		if(abs(error) <= tolerance){ 
.................... 			control_inputY(0, direc); 
.................... 			check = 0;	 
.................... 		}else{ 
.................... 			if(stateSWII == 2){ 
.................... 			control_inputY(error, direc);  
.................... 			} 
.................... 		} 
.................... 	} 
.................... } 
....................  
.................... void move_posZ(int pulse_z, int direc){ 
.................... 	int check = 1; 
.................... 	while(check == 1){ 
.................... 	int error = pulse_z - countZ; 
.................... 		if(abs(error) <= tolerance){ 
.................... 			control_inputZ(0, direc); 
.................... 			check = 0;	 
.................... 		}else{ 
.................... 			if(stateSWII == 1){ 
.................... 				control_inputZ(error, direc); 
.................... 			}check = 0;	  
.................... 		}  
.................... 	} 
.................... } 
....................  
.................... void set_Zero(void){ 
.................... 	int loop = 1; 
.................... 	while(loop == 1){ 
.................... 		if(stateSWII == 0){ 
.................... 			if(input(lim_SW_X) == 1){ 
.................... 				control_inputX(0,0); 
.................... 				stateSWII++; 
.................... 			}else if(input(lim_SW_X) == 0){ 
.................... 				move_posX(5000,0); 
.................... 			} 
.................... 		}else if(stateSWII == 1){  //X-axial 
.................... 			if(input(lim_SW_Z) == 1){ 
.................... 				control_inputZ(0,1); 
.................... 				stateSWII++; 
.................... 				loop = 0; 
.................... 			}else { 
.................... 			move_posZ(7000,1); 
.................... 			} 
.................... 		} 
.................... 	} 
.................... } 
....................  
.................... void move_XYZ(int z){ 
.................... 	if(state == 0){ 
.................... 		move_posZ(z,0); 
.................... 	} 
.................... 	/*else if(state == 1){ 
.................... 		move_posY(y); 
.................... 		state++; 
.................... 	} 
.................... 	else if(state == 2){ 
.................... 		move_posX(x); 
.................... 		state++; 
.................... 	}*/ 
.................... } 
....................  
.................... #INT_EXT0 
.................... void INT_EXT_INPUT0 (void) 
*
0E10:  PUSH    42
0E12:  PUSH    36
0E14:  PUSH    32
0E16:  MOV     W0,[W15++]
0E18:  MOV     #2,W0
0E1A:  REPEAT  #C
0E1C:  MOV     [W0++],[W15++]
.................... {	 
.................... 	if(stateEncode_X == 0){ 
0E1E:  CP0     8B6
0E20:  BRA     NZ,E26
.................... 		countX++; 
0E22:  INC     08B0
.................... 	}else{countX--;} 
0E24:  BRA     E28
0E26:  DEC     08B0
.................... } 
0E28:  BCLR.B  84.0
0E2A:  MOV     #1A,W0
0E2C:  REPEAT  #C
0E2E:  MOV     [--W15],[W0--]
0E30:  MOV     [--W15],W0
0E32:  POP     32
0E34:  POP     36
0E36:  POP     42
0E38:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1 (void) 
0E3A:  PUSH    42
0E3C:  PUSH    36
0E3E:  PUSH    32
0E40:  MOV     W0,[W15++]
0E42:  MOV     #2,W0
0E44:  REPEAT  #C
0E46:  MOV     [W0++],[W15++]
.................... {	 
.................... 	if(stateEncode_Y == 0){ 
0E48:  CP0     8B8
0E4A:  BRA     NZ,E50
.................... 		countY++; 
0E4C:  INC     08B2
.................... 	}else{countY--;} 
0E4E:  BRA     E52
0E50:  DEC     08B2
.................... } 
0E52:  BCLR.B  86.4
0E54:  MOV     #1A,W0
0E56:  REPEAT  #C
0E58:  MOV     [--W15],[W0--]
0E5A:  MOV     [--W15],W0
0E5C:  POP     32
0E5E:  POP     36
0E60:  POP     42
0E62:  RETFIE  
.................... #INT_EXT2 
.................... void INT_EXT_INPUT2 (void) 
0E64:  PUSH    42
0E66:  PUSH    36
0E68:  PUSH    32
0E6A:  MOV     W0,[W15++]
0E6C:  MOV     #2,W0
0E6E:  REPEAT  #C
0E70:  MOV     [W0++],[W15++]
.................... {	 
.................... 	if(stateEncode_Z == 0){ 
0E72:  CP0     8BA
0E74:  BRA     NZ,E7A
.................... 		countZ++; 
0E76:  INC     08B4
.................... 	}else{countZ--;} 
0E78:  BRA     E7C
0E7A:  DEC     08B4
0E7C:  BCLR.B  87.5
0E7E:  MOV     #1A,W0
0E80:  REPEAT  #C
0E82:  MOV     [--W15],[W0--]
0E84:  MOV     [--W15],W0
0E86:  POP     32
0E88:  POP     36
0E8A:  POP     42
0E8C:  RETFIE  
.................... } 
.................... void Init_Interrupts() 
.................... { 
.................... 	disable_interrupts(GLOBAL); 
0E8E:  BCLR.B  81.7
0E90:  MOV     #E0,W4
0E92:  MOV     W4,42
0E94:  BSET.B  81.7
....................  
.................... 	enable_interrupts( INT_EXT0 ); 
0E96:  BSET.B  94.0
.................... 	ext_int_edge( 0, L_TO_H ) ; 
0E98:  BCLR.B  82.0
....................  
.................... 	enable_interrupts( INT_EXT1 ); 
0E9A:  BSET.B  96.4
.................... 	ext_int_edge( 1, L_TO_H ) ; 
0E9C:  BCLR.B  82.1
....................  
.................... 	enable_interrupts( INT_EXT2 ); 
0E9E:  BSET.B  97.5
.................... 	ext_int_edge( 2, L_TO_H ) ; 
0EA0:  BCLR.B  82.2
....................  
.................... 	setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8 ,TIME_PERIOD); 
0EA2:  CLR     112
0EA4:  MOV     #7D0,W4
0EA6:  MOV     W4,10E
0EA8:  MOV     #8010,W4
0EAA:  MOV     W4,112
.................... 	 
.................... 	enable_interrupts(GLOBAL); 
0EAC:  BCLR.B  81.7
0EAE:  CLR     42
0EB0:  BSET.B  81.7
0EB2:  RETURN  
....................  
.................... } 
....................  
.................... int main(){ 
*
13D8:  MOV     #2780,W15
13DA:  MOV     #27FF,W0
13DC:  MOV     W0,20
13DE:  NOP     
13E0:  BSET.B  81.7
13E2:  MOV     #46,W0
13E4:  MOV.B   W0L,742
13E6:  MOV     #57,W0
13E8:  MOV.B   W0L,742
13EA:  BCLR.B  742.6
13EC:  MOV     #63F,W0
13EE:  MOV     W0,680
13F0:  MOV     #3F03,W0
13F2:  MOV     W0,682
13F4:  MOV     #3F0C,W0
13F6:  MOV     W0,6A4
13F8:  MOV     #12,W0
13FA:  MOV     W0,6C2
13FC:  MOV     #1314,W0
13FE:  MOV     W0,6C8
1400:  MOV     #300,W0
1402:  MOV     W0,6CC
1404:  MOV     #1615,W0
1406:  MOV     W0,6CE
1408:  MOV     #46,W0
140A:  MOV.B   W0L,742
140C:  MOV     #57,W0
140E:  MOV.B   W0L,742
1410:  BSET.B  742.6
1412:  CLR     744
1414:  MOV     #8000,W4
1416:  MOV     W4,220
1418:  MOV     #400,W4
141A:  MOV     W4,222
141C:  BSET.B  220.3
141E:  MOV     #22,W4
1420:  MOV     W4,228
1422:  CLR     8B0
1424:  CLR     8B2
1426:  CLR     8B4
1428:  CLR     8B6
142A:  CLR     8B8
142C:  CLR     8BA
142E:  CLR     8BC
1430:  CLR     8BE
1432:  SETM    32C
1434:  BRA     14CA
1436:  DATA    C0,06,08
1438:  DATA    00,00,00
143A:  DATA    4B,F0,3F
143C:  DATA    5C,0A,58
143E:  DATA    F6,3B,8F
1440:  DATA    00,C0,3C
1442:  DATA    8B,28,AC
1444:  DATA    3C,BE,F6
1446:  DATA    3F,D2,D5
1448:  DATA    44,16,8C
144A:  DATA    15,D7,BF
144C:  DATA    69,00,5A
144E:  DATA    2E,1B,87
1450:  DATA    99,3F,9A
1452:  DATA    5F,AD,4B
1454:  DATA    91,E4,01
1456:  DATA    C0,5D,11
1458:  DATA    2F,92,E4
145A:  DATA    81,FB,3F
145C:  DATA    38,DA,91
145E:  DATA    80,9D,C5
1460:  DATA    E0,BF,6F
1462:  DATA    12,C0,B4
1464:  DATA    C3,09,AB
1466:  DATA    3F,6B,C1
1468:  DATA    03,4E,C1
146A:  DATA    B5,45,BF
146C:  DATA    F7,40,05
146E:  DATA    FF,00,5A
1470:  DATA    EF,3F,F3
1472:  DATA    A3,E2,F7
1474:  DATA    D7,FF,01
1476:  DATA    40,C0,B4
1478:  DATA    FF,05,3C
147A:  DATA    58,FC,3F
147C:  DATA    3B,D3,C0
147E:  DATA    B5,BA,8C
1480:  DATA    E2,3F,39
1482:  DATA    D3,C7,3D
1484:  DATA    41,79,B2
1486:  DATA    3F,87,0D
1488:  DATA    3C,50,D0
148A:  DATA    AF,62,3F
148C:  DATA    30,4B,8D
148E:  DATA    A2,82,AA
1490:  DATA    04,40,09
1492:  DATA    A0,40,4A
1494:  DATA    05,76,03
1496:  DATA    40,EC,9E
1498:  DATA    37,88,A6
149A:  DATA    44,F0,3F
149C:  DATA    8F,12,8D
149E:  DATA    29,9A,5B
14A0:  DATA    C7,3F,0E
14A2:  DATA    E0,80,7C
14A4:  DATA    A1,D8,86
14A6:  DATA    3F,29,4B
14A8:  DATA    FB,95,C2
14AA:  DATA    37,1A,3F
14AC:  DATA    00,00,00
14AE:  INC     W2,W2
14B0:  CP      W2,#1
14B2:  BRA     NZ,14BC
14B4:  TBLRDL  [W1],W3
14B6:  TBLRDH  [W1++],W4
14B8:  MOV.B   6,W0L
14BA:  RETURN  
14BC:  CP      W2,#2
14BE:  BRA     NZ,14C4
14C0:  MOV.B   7,W0L
14C2:  RETURN  
14C4:  MOV.B   8,W0L
14C6:  CLR     W2
14C8:  RETURN  
14CA:  MOV     #0,W6
14CC:  MOV     #0,W0
14CE:  MOV     W0,32
14D0:  MOV     #1436,W0
14D2:  MOV     W0,W1
14D4:  CLR     W2
14D6:  CALL    14AE
14DA:  MOV.B   W0L,B
14DC:  CALL    14AE
14E0:  MOV.B   W0L,A
14E2:  CP0     W5
14E4:  BRA     Z,1518
14E6:  BTSS    W5.F
14E8:  BRA     14F8
14EA:  CALL    14AE
14EE:  MOV.B   W0L,D
14F0:  CALL    14AE
14F4:  MOV.B   W0L,C
14F6:  BCLR    W5.F
14F8:  BTSS    W5.E
14FA:  BRA     150C
14FC:  BCLR    W5.E
14FE:  DEC     W5,W5
1500:  CALL    14AE
1504:  MOV.B   W0L,W7L
1506:  REPEAT  W5
1508:  MOV.B   W7L,[W6++]
150A:  BRA     14D6
150C:  CALL    14AE
1510:  MOV.B   W0L,[W6++]
1512:  DEC     W5,W5
1514:  BRA     NZ,150C
1516:  BRA     14D6
.................... 	/*char stateSW = 0; 
.................... 	while((int)stateSW == 0){ 
.................... 		if(input(PIN_B5) == 0){ 
.................... 			stateSW = 1; 
.................... 		} 
.................... 	}*/ 
.................... 	Init_Interrupts(); 
1518:  CALL    E8E
....................  
.................... 	setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
151C:  MOV     #E,W4
151E:  MOV     W4,184
.................... 	setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
1520:  MOV     #E,W4
1522:  MOV     W4,18A
.................... 	setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
1524:  MOV     #E,W4
1526:  MOV     W4,190
....................  
.................... 	while(TRUE){ 
.................... 			//set_Zero(); // X is Y, Z is x 
.................... 			move_posX(3000,1); //if = 1 ,y is left 	: if X_Axial = 0 is forward and if = 1 z_Axial is down 
1528:  MOV     #BB8,W4
152A:  MOV     W4,8C0
152C:  MOV     #1,W4
152E:  MOV     W4,8C2
1530:  CALL    129C
.................... 			printf("X : %d\n",countY); 
1534:  MOV     #0,W1
1536:  MOV     W1,W0
1538:  CLR.B   1
153A:  CALL    DFC
153E:  INC     W1,W1
1540:  BTSC.B  223.1
1542:  BRA     1540
1544:  MOV     W0,224
1546:  MOV     #3,W0
1548:  CPSGT   W1,W0
154A:  BRA     1536
154C:  MOV     8B2,W0
154E:  MOV     #0,W4
1550:  CALL    12E2
1554:  BTSC.B  223.1
1556:  BRA     1554
1558:  MOV     #A,W4
155A:  MOV     W4,224
155C:  BRA     1528
.................... 	}return 0; 
155E:  CLR     0
.................... } 
1560:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
