CCS PCD C Compiler, Version 5.015, 5967               05-Nov-18 09:27

               Filename:   C:\Users\thipawan\Desktop\Embedded\MilestoneIII\MPIDE\multiDrop_rev2.lst

               ROM used:   1442 bytes (4%)
                           Largest free fragment is 29274
               RAM used:   143 (2%) at main() level
                           147 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    1060
*
0C50:  GOTO    F38
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    0A,72,00
0E0A:  DATA    65,73,00
0E0C:  DATA    75,6C,00
0E0E:  DATA    74,20,00
0E10:  DATA    3D,20,00
0E12:  DATA    25,64,00
0E14:  DATA    0A,00,00
*
0F6A:  MOV     W5,[W15++]
0F6C:  MOV     #C,W5
0F6E:  REPEAT  #3
0F70:  MOV     [W5++],[W15++]
0F72:  BTSS    W0.F
0F74:  BRA     F8E
0F76:  NEG     W0,W0
0F78:  BSET    W4.8
0F7A:  BTSS    W4.F
0F7C:  BRA     F8E
0F7E:  MOV     W0,[W15++]
0F80:  MOV     #2D,W0
0F82:  BTSC.B  223.1
0F84:  BRA     F82
0F86:  MOV     W0,224
0F88:  MOV     [--W15],W0
0F8A:  BCLR    W4.8
0F8C:  DEC.B   0008
0F8E:  CLR     W5
0F90:  MOV     W0,W7
0F92:  MOV     W4,W9
0F94:  BCLR    W4.F
0F96:  CP0.B   W4L
0F98:  BRA     NZ,FA6
0F9A:  BTSC    W9.F
0F9C:  BRA     FA2
0F9E:  MOV     #0,W5
0FA0:  BRA     FC0
0FA2:  MOV     #0,W5
0FA4:  BRA     FC0
0FA6:  SUB.B   W4L,#6,W5L
0FA8:  BRA     NC,FBE
0FAA:  MOV     #30,W0
0FAC:  BTSS    W9.F
0FAE:  MOV     #20,W0
0FB0:  BTSC.B  223.1
0FB2:  BRA     FB0
0FB4:  MOV     W0,224
0FB6:  DEC     W5,W5
0FB8:  BRA     NN,FB0
0FBA:  MOV     #5,W5
0FBC:  BRA     FC0
0FBE:  MOV     W4,W5
0FC0:  MOV     #6,W4
0FC2:  BTSC    W5.8
0FC4:  INC     W4,W4
0FC6:  BSET    W5.E
0FC8:  BTSC    W9.F
0FCA:  BSET    W5.F
0FCC:  MOV     #2710,W8
0FCE:  REPEAT  #11
0FD0:  DIV.U   W7,W8
0FD2:  CALL    1016
0FD6:  MOV     W1,W7
0FD8:  MOV     #3E8,W8
0FDA:  REPEAT  #11
0FDC:  DIV.U   W7,W8
0FDE:  CALL    1016
0FE2:  MOV     W1,W7
0FE4:  MOV     #64,W8
0FE6:  REPEAT  #11
0FE8:  DIV.U   W7,W8
0FEA:  CALL    1016
0FEE:  MOV     W1,W7
0FF0:  MOV     #A,W8
0FF2:  REPEAT  #11
0FF4:  DIV.U   W7,W8
0FF6:  CALL    1016
0FFA:  BTSS    W9.8
0FFC:  BRA     1008
0FFE:  MOV     #2D,W0
1000:  BTSC.B  223.1
1002:  BRA     1000
1004:  MOV     W0,224
1006:  BCLR    W9.8
1008:  MOV     #30,W0
100A:  ADD.B   W1L,W0L,W0L
100C:  MOV     W0,2A
100E:  BTSC.B  223.1
1010:  BRA     100E
1012:  MOV     W0,224
1014:  BRA     1056
1016:  MOV     #30,W6
1018:  CP0     W0
101A:  BRA     NZ,1038
101C:  BTSS    W5.E
101E:  BRA     104C
1020:  DEC     W4,W4
1022:  CP.B    W4L,W5L
1024:  BRA     Z,102A
1026:  BTSC.B  42.0
1028:  RETURN  
102A:  CP0     W0
102C:  BRA     NZ,1038
102E:  BTSS    W5.E
1030:  BRA     104C
1032:  BTSS    W5.F
1034:  MOV     #20,W6
1036:  BRA     104C
1038:  BCLR    W5.E
103A:  BTSS    W9.8
103C:  BRA     104C
103E:  MOV     W0,W10
1040:  MOV     #2D,W0
1042:  BTSC.B  223.1
1044:  BRA     1042
1046:  MOV     W0,224
1048:  BCLR    W9.8
104A:  MOV     W10,W0
104C:  ADD.B   W6L,W0L,W0L
104E:  BTSC.B  223.1
1050:  BRA     104E
1052:  MOV     W0,224
1054:  RETURN  
1056:  MOV     #12,W5
1058:  REPEAT  #3
105A:  MOV     [--W15],[W5--]
105C:  MOV     [--W15],W5
105E:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #use delay (internal = 8 MHz, clock = 32MHz) 
.................... #PIN_SELECT U1RX = PIN_B12 //PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 //PIN_B15 // 
.................... #use rs232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #define DEVICE_ID 2 
.................... #define LENGTH 11 
....................  
.................... char arrayData[4] = {}; 
.................... char arrayDataXI[2] = {}; 
.................... char arrayDataXII[2] = {}; 
.................... char arrayDataYI[2] = {}; 
.................... char arrayDataYII[2] = {}; 
....................  
.................... char SM_id = 1; 
.................... int getPackage = 0; 
....................  
.................... void SM_RxD(int c){ 
*
0E16:  MOV     W5,[W15++]
0E18:  MOV     W6,[W15++]
.................... 	if (SM_id <= 2){ 
0E1A:  MOV.B   80C,W0L
0E1C:  SE      W0,W0
0E1E:  CP      W0,#2
0E20:  BRA     GT,E32
.................... 		if (c ==  0xFF){ 
0E22:  MOV     812,W4
0E24:  XOR     #FF,W4
0E26:  BRA     NZ,E2C
.................... 			SM_id++; 
0E28:  INC.B   080C
.................... 		}else{ 
0E2A:  BRA     E30
.................... 			SM_id = 1; 
0E2C:  MOV.B   #1,W0L
0E2E:  MOV.B   W0L,80C
.................... 		} 
.................... 	}else if (SM_id <= 3){ 
0E30:  BRA     F32
0E32:  MOV.B   80C,W0L
0E34:  SE      W0,W0
0E36:  CP      W0,#3
0E38:  BRA     GT,E44
.................... 		if (c == 0x02){ 
0E3A:  MOV     812,W4
0E3C:  CP      W4,#2
0E3E:  BRA     NZ,E42
.................... 			SM_id++; 
0E40:  INC.B   080C
.................... 		} 
.................... 	}else if (SM_id <= 4){ 
0E42:  BRA     F32
0E44:  MOV.B   80C,W0L
0E46:  SE      W0,W0
0E48:  CP      W0,#4
0E4A:  BRA     GT,E56
.................... 		if ( c == 0x08){ 
0E4C:  MOV     812,W4
0E4E:  CP      W4,#8
0E50:  BRA     NZ,E54
.................... 			SM_id++; 
0E52:  INC.B   080C
.................... 		} 
.................... 	}else if (SM_id > 4 && SM_id <= 6){ 
0E54:  BRA     F32
0E56:  MOV.B   80C,W0L
0E58:  SE      W0,W0
0E5A:  CP      W0,#4
0E5C:  BRA     LE,E78
0E5E:  MOV.B   80C,W0L
0E60:  SE      W0,W0
0E62:  CP      W0,#6
0E64:  BRA     GT,E78
.................... 		arrayDataXI[SM_id - 5] = c; 
0E66:  MOV.B   80C,W0L
0E68:  SE      W0,W0
0E6A:  SUB     W0,#5,W5
0E6C:  MOV     #804,W4
0E6E:  ADD     W5,W4,W6
0E70:  MOV     812,W0
0E72:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0E74:  INC.B   080C
.................... 	}else if (SM_id > 6 && SM_id <= 8){ 
0E76:  BRA     F32
0E78:  MOV.B   80C,W0L
0E7A:  SE      W0,W0
0E7C:  CP      W0,#6
0E7E:  BRA     LE,E9A
0E80:  MOV.B   80C,W0L
0E82:  SE      W0,W0
0E84:  CP      W0,#8
0E86:  BRA     GT,E9A
.................... 		arrayDataYI[SM_id - 7] = c; 
0E88:  MOV.B   80C,W0L
0E8A:  SE      W0,W0
0E8C:  SUB     W0,#7,W5
0E8E:  MOV     #808,W4
0E90:  ADD     W5,W4,W6
0E92:  MOV     812,W0
0E94:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0E96:  INC.B   080C
.................... 	}else if (SM_id > 8 && SM_id <= 10){ 
0E98:  BRA     F32
0E9A:  MOV.B   80C,W0L
0E9C:  SE      W0,W0
0E9E:  CP      W0,#8
0EA0:  BRA     LE,EBC
0EA2:  MOV.B   80C,W0L
0EA4:  SE      W0,W0
0EA6:  CP      W0,#A
0EA8:  BRA     GT,EBC
.................... 		arrayData[SM_id - 9] = c; 
0EAA:  MOV.B   80C,W0L
0EAC:  SE      W0,W0
0EAE:  SUB     W0,#9,W5
0EB0:  MOV     #800,W4
0EB2:  ADD     W5,W4,W6
0EB4:  MOV     812,W0
0EB6:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0EB8:  INC.B   080C
.................... 	}else if (SM_id > 10 && SM_id <= 12){ 
0EBA:  BRA     F32
0EBC:  MOV.B   80C,W0L
0EBE:  SE      W0,W0
0EC0:  CP      W0,#A
0EC2:  BRA     LE,EDE
0EC4:  MOV.B   80C,W0L
0EC6:  SE      W0,W0
0EC8:  CP      W0,#C
0ECA:  BRA     GT,EDE
.................... 		arrayDataXII[SM_id - 11] = c; 
0ECC:  MOV.B   80C,W0L
0ECE:  SE      W0,W0
0ED0:  SUB     W0,#B,W5
0ED2:  MOV     #806,W4
0ED4:  ADD     W5,W4,W6
0ED6:  MOV     812,W0
0ED8:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0EDA:  INC.B   080C
.................... 	}else if (SM_id > 12 && SM_id <= 14){ 
0EDC:  BRA     F32
0EDE:  MOV.B   80C,W0L
0EE0:  SE      W0,W0
0EE2:  CP      W0,#C
0EE4:  BRA     LE,F00
0EE6:  MOV.B   80C,W0L
0EE8:  SE      W0,W0
0EEA:  CP      W0,#E
0EEC:  BRA     GT,F00
.................... 		arrayDataYII[SM_id - 13] = c; 
0EEE:  MOV.B   80C,W0L
0EF0:  SE      W0,W0
0EF2:  SUB     W0,#D,W5
0EF4:  MOV     #80A,W4
0EF6:  ADD     W5,W4,W6
0EF8:  MOV     812,W0
0EFA:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0EFC:  INC.B   080C
.................... 	}else if(SM_id > 14 && SM_id <= 16){ 
0EFE:  BRA     F32
0F00:  MOV.B   80C,W0L
0F02:  SE      W0,W0
0F04:  CP      W0,#E
0F06:  BRA     LE,F22
0F08:  MOV.B   80C,W0L
0F0A:  SE      W0,W0
0F0C:  CP      W0,#10
0F0E:  BRA     GT,F22
.................... 		arrayData[SM_id - 13] = c; 
0F10:  MOV.B   80C,W0L
0F12:  SE      W0,W0
0F14:  SUB     W0,#D,W5
0F16:  MOV     #800,W4
0F18:  ADD     W5,W4,W6
0F1A:  MOV     812,W0
0F1C:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0F1E:  INC.B   080C
.................... 	}else if(SM_id > 16){ 
0F20:  BRA     F32
0F22:  MOV.B   80C,W0L
0F24:  SE      W0,W0
0F26:  CP      W0,#10
0F28:  BRA     LE,F32
.................... 		getPackage = 1; 
0F2A:  MOV     #1,W4
0F2C:  MOV     W4,80E
.................... 		SM_id = 1; 
0F2E:  MOV.B   #1,W0L
0F30:  MOV.B   W0L,80C
.................... 	} 
0F32:  MOV     [--W15],W6
0F34:  MOV     [--W15],W5
0F36:  RETURN  
.................... } 
....................  
.................... #INT_RDA               // receive data interrupt one time per one  
.................... void UART1_Isr() { 
0F38:  PUSH    42
0F3A:  PUSH    36
0F3C:  PUSH    32
0F3E:  MOV     W0,[W15++]
0F40:  MOV     #2,W0
0F42:  REPEAT  #C
0F44:  MOV     [W0++],[W15++]
0F46:  BTSS.B  222.0
0F48:  BRA     F46
0F4A:  MOV     226,W0
0F4C:  MOV.B   W0L,810
0F4E:  CLR.B   811
....................     int c = getc(); 
....................     SM_RxD(c); 
0F50:  PUSH    810
0F52:  POP     812
0F54:  CALL    E16
0F58:  BCLR.B  85.3
0F5A:  MOV     #1A,W0
0F5C:  REPEAT  #C
0F5E:  MOV     [--W15],[W0--]
0F60:  MOV     [--W15],W0
0F62:  POP     32
0F64:  POP     36
0F66:  POP     42
0F68:  RETFIE  
.................... } 
.................... void main(){ 
*
1060:  MOV     #2780,W15
1062:  MOV     #27FF,W0
1064:  MOV     W0,20
1066:  NOP     
1068:  MOV     #4444,W0
106A:  MOV     W0,A8
106C:  BSET.B  81.7
106E:  MOV     #46,W0
1070:  MOV.B   W0L,742
1072:  MOV     #57,W0
1074:  MOV.B   W0L,742
1076:  BCLR.B  742.6
1078:  MOV     #3F0C,W0
107A:  MOV     W0,6A4
107C:  MOV     #300,W0
107E:  MOV     W0,6CC
1080:  MOV     #46,W0
1082:  MOV.B   W0L,742
1084:  MOV     #57,W0
1086:  MOV.B   W0L,742
1088:  BSET.B  742.6
108A:  CLR     744
108C:  MOV     #8000,W4
108E:  MOV     W4,220
1090:  MOV     #400,W4
1092:  MOV     W4,222
1094:  BSET.B  220.3
1096:  MOV     #22,W4
1098:  MOV     W4,228
109A:  MOV.B   #1,W0L
109C:  MOV.B   W0L,80C
109E:  CLR     80E
10A0:  SETM    32C
10A2:  CLR     800
10A4:  CLR     802
10A6:  CLR     804
10A8:  CLR     806
10AA:  CLR     808
10AC:  CLR     80A
.................... 	disable_interrupts(GLOBAL); 
10AE:  BCLR.B  81.7
10B0:  MOV     #E0,W4
10B2:  MOV     W4,42
10B4:  BSET.B  81.7
.................... 	 
....................     clear_interrupt(INT_RDA);   // recommend style coding to confirm everything clear before use 
10B6:  REPEAT  #3
10B8:  MOV     226,W0
10BA:  BCLR.B  85.3
....................     enable_interrupts(INT_RDA); 
10BC:  BSET.B  95.3
....................     printf("\nresult = %d\n", arrayData[3]); 
10BE:  MOV     #0,W1
10C0:  MOV     W1,W0
10C2:  CLR.B   1
10C4:  CALL    DFC
10C8:  INC     W1,W1
10CA:  BTSC.B  223.1
10CC:  BRA     10CA
10CE:  MOV     W0,224
10D0:  MOV     #9,W0
10D2:  CPSGT   W1,W0
10D4:  BRA     10C0
10D6:  MOV.B   803,W0L
10D8:  SE      W0,W0
10DA:  MOV     #0,W4
10DC:  CALL    F6A
10E0:  BTSC.B  223.1
10E2:  BRA     10E0
10E4:  MOV     #A,W4
10E6:  MOV     W4,224
.................... 	enable_interrupts(GLOBAL); 
10E8:  BCLR.B  81.7
10EA:  CLR     42
10EC:  BSET.B  81.7
.................... 	while(TRUE){ 
.................... 		if (getPackage >= 1){ 
10EE:  MOV     80E,W4
10F0:  CP      W4,#1
10F2:  BRA     LT,119E
.................... 			getPackage = 0; 
10F4:  CLR     80E
.................... 			//printf("\ndataFromPIC = %d\n", arraydata[0]); 
.................... 			//printf("\ndataFromPIC = %d\n", arraydata[1]); 
.................... 			//printf("\ndataFromPIC = %d\n", arraydata[2]); 
.................... 			//printf("\ndataFromPIC = %d\n", arraydata[3]); 
.................... 			//int bagPosX, bagPosY, ; 
.................... 			//memcpy(&test, arrayDataYII, sizeof(test)); 
.................... 			//printf("\nresult = %d\n", array[0]); 
.................... 			//printf("\nresult = %d\n", test);arrayData 
.................... 			printf("\nresult = %d\n", arrayData[0]); 
10F6:  MOV     #0,W1
10F8:  MOV     W1,W0
10FA:  CLR.B   1
10FC:  CALL    DFC
1100:  INC     W1,W1
1102:  BTSC.B  223.1
1104:  BRA     1102
1106:  MOV     W0,224
1108:  MOV     #9,W0
110A:  CPSGT   W1,W0
110C:  BRA     10F8
110E:  MOV.B   800,W0L
1110:  SE      W0,W0
1112:  MOV     #0,W4
1114:  CALL    F6A
1118:  BTSC.B  223.1
111A:  BRA     1118
111C:  MOV     #A,W4
111E:  MOV     W4,224
.................... 			printf("\nresult = %d\n", arrayData[1]); 
1120:  MOV     #0,W1
1122:  MOV     W1,W0
1124:  CLR.B   1
1126:  CALL    DFC
112A:  INC     W1,W1
112C:  BTSC.B  223.1
112E:  BRA     112C
1130:  MOV     W0,224
1132:  MOV     #9,W0
1134:  CPSGT   W1,W0
1136:  BRA     1122
1138:  MOV.B   801,W0L
113A:  SE      W0,W0
113C:  MOV     #0,W4
113E:  CALL    F6A
1142:  BTSC.B  223.1
1144:  BRA     1142
1146:  MOV     #A,W4
1148:  MOV     W4,224
.................... 			printf("\nresult = %d\n", arrayData[2]); 
114A:  MOV     #0,W1
114C:  MOV     W1,W0
114E:  CLR.B   1
1150:  CALL    DFC
1154:  INC     W1,W1
1156:  BTSC.B  223.1
1158:  BRA     1156
115A:  MOV     W0,224
115C:  MOV     #9,W0
115E:  CPSGT   W1,W0
1160:  BRA     114C
1162:  MOV.B   802,W0L
1164:  SE      W0,W0
1166:  MOV     #0,W4
1168:  CALL    F6A
116C:  BTSC.B  223.1
116E:  BRA     116C
1170:  MOV     #A,W4
1172:  MOV     W4,224
.................... 			printf("\nresult = %d\n", arrayData[3]); 
1174:  MOV     #0,W1
1176:  MOV     W1,W0
1178:  CLR.B   1
117A:  CALL    DFC
117E:  INC     W1,W1
1180:  BTSC.B  223.1
1182:  BRA     1180
1184:  MOV     W0,224
1186:  MOV     #9,W0
1188:  CPSGT   W1,W0
118A:  BRA     1176
118C:  MOV.B   803,W0L
118E:  SE      W0,W0
1190:  MOV     #0,W4
1192:  CALL    F6A
1196:  BTSC.B  223.1
1198:  BRA     1196
119A:  MOV     #A,W4
119C:  MOV     W4,224
.................... 		} 
119E:  BRA     10EE
.................... 	} 
.................... } 
....................  
11A0:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
