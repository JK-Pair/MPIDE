CCS PCD C Compiler, Version 5.015, 5967               14-Nov-18 12:04

               Filename:   C:\Users\thipawan\Desktop\Embedded\MilestoneIII\MPIDE\multiDrop_rev2.lst

               ROM used:   1406 bytes (4%)
                           Largest free fragment is 29310
               RAM used:   149 (2%) at main() level
                           159 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    10D8
*
0C50:  GOTO    10A6
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    0A,72,00
0E0A:  DATA    65,73,00
0E0C:  DATA    75,6C,00
0E0E:  DATA    74,20,00
0E10:  DATA    3D,20,00
0E12:  DATA    25,64,00
0E14:  DATA    0A,00,00
0E16:  MOV     W5,[W15++]
0E18:  MOV     #C,W5
0E1A:  REPEAT  #3
0E1C:  MOV     [W5++],[W15++]
0E1E:  BTSS    W0.F
0E20:  BRA     E3A
0E22:  NEG     W0,W0
0E24:  BSET    W4.8
0E26:  BTSS    W4.F
0E28:  BRA     E3A
0E2A:  MOV     W0,[W15++]
0E2C:  MOV     #2D,W0
0E2E:  BTSC.B  223.1
0E30:  BRA     E2E
0E32:  MOV     W0,224
0E34:  MOV     [--W15],W0
0E36:  BCLR    W4.8
0E38:  DEC.B   0008
0E3A:  CLR     W5
0E3C:  MOV     W0,W7
0E3E:  MOV     W4,W9
0E40:  BCLR    W4.F
0E42:  CP0.B   W4L
0E44:  BRA     NZ,E52
0E46:  BTSC    W9.F
0E48:  BRA     E4E
0E4A:  MOV     #0,W5
0E4C:  BRA     E6C
0E4E:  MOV     #0,W5
0E50:  BRA     E6C
0E52:  SUB.B   W4L,#6,W5L
0E54:  BRA     NC,E6A
0E56:  MOV     #30,W0
0E58:  BTSS    W9.F
0E5A:  MOV     #20,W0
0E5C:  BTSC.B  223.1
0E5E:  BRA     E5C
0E60:  MOV     W0,224
0E62:  DEC     W5,W5
0E64:  BRA     NN,E5C
0E66:  MOV     #5,W5
0E68:  BRA     E6C
0E6A:  MOV     W4,W5
0E6C:  MOV     #6,W4
0E6E:  BTSC    W5.8
0E70:  INC     W4,W4
0E72:  BSET    W5.E
0E74:  BTSC    W9.F
0E76:  BSET    W5.F
0E78:  MOV     #2710,W8
0E7A:  REPEAT  #11
0E7C:  DIV.U   W7,W8
0E7E:  CALL    EC2
0E82:  MOV     W1,W7
0E84:  MOV     #3E8,W8
0E86:  REPEAT  #11
0E88:  DIV.U   W7,W8
0E8A:  CALL    EC2
0E8E:  MOV     W1,W7
0E90:  MOV     #64,W8
0E92:  REPEAT  #11
0E94:  DIV.U   W7,W8
0E96:  CALL    EC2
0E9A:  MOV     W1,W7
0E9C:  MOV     #A,W8
0E9E:  REPEAT  #11
0EA0:  DIV.U   W7,W8
0EA2:  CALL    EC2
0EA6:  BTSS    W9.8
0EA8:  BRA     EB4
0EAA:  MOV     #2D,W0
0EAC:  BTSC.B  223.1
0EAE:  BRA     EAC
0EB0:  MOV     W0,224
0EB2:  BCLR    W9.8
0EB4:  MOV     #30,W0
0EB6:  ADD.B   W1L,W0L,W0L
0EB8:  MOV     W0,2A
0EBA:  BTSC.B  223.1
0EBC:  BRA     EBA
0EBE:  MOV     W0,224
0EC0:  BRA     F02
0EC2:  MOV     #30,W6
0EC4:  CP0     W0
0EC6:  BRA     NZ,EE4
0EC8:  BTSS    W5.E
0ECA:  BRA     EF8
0ECC:  DEC     W4,W4
0ECE:  CP.B    W4L,W5L
0ED0:  BRA     Z,ED6
0ED2:  BTSC.B  42.0
0ED4:  RETURN  
0ED6:  CP0     W0
0ED8:  BRA     NZ,EE4
0EDA:  BTSS    W5.E
0EDC:  BRA     EF8
0EDE:  BTSS    W5.F
0EE0:  MOV     #20,W6
0EE2:  BRA     EF8
0EE4:  BCLR    W5.E
0EE6:  BTSS    W9.8
0EE8:  BRA     EF8
0EEA:  MOV     W0,W10
0EEC:  MOV     #2D,W0
0EEE:  BTSC.B  223.1
0EF0:  BRA     EEE
0EF2:  MOV     W0,224
0EF4:  BCLR    W9.8
0EF6:  MOV     W10,W0
0EF8:  ADD.B   W6L,W0L,W0L
0EFA:  BTSC.B  223.1
0EFC:  BRA     EFA
0EFE:  MOV     W0,224
0F00:  RETURN  
0F02:  MOV     #12,W5
0F04:  REPEAT  #3
0F06:  MOV     [--W15],[W5--]
0F08:  MOV     [--W15],W5
0F0A:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #use delay (internal = 8 MHz, clock = 32MHz) 
.................... #PIN_SELECT U1RX = PIN_B12 //PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 //PIN_B15 // 
.................... #use rs232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
....................  
.................... char arrayData[6] = {}; 
.................... char arrayDataXI[2] = {}; 
.................... char arrayDataXII[2] = {}; 
.................... char arrayDataYI[2] = {}; 
.................... char arrayDataYII[2] = {}; 
.................... char arrayAng[2] = {}; 
.................... char arrayAngGrip[2] = {}; 
....................  
.................... char SM_id = 1; 
.................... int getPackage = 0; 
.................... void SM_RxD(int c){ 
0F0C:  MOV     W5,[W15++]
0F0E:  MOV     W6,[W15++]
.................... 	if (SM_id <= 2){ 
0F10:  MOV.B   812,W0L
0F12:  SE      W0,W0
0F14:  CP      W0,#2
0F16:  BRA     GT,F28
.................... 		if (c ==  0xFF){ 
0F18:  MOV     81A,W4
0F1A:  XOR     #FF,W4
0F1C:  BRA     NZ,F22
.................... 			SM_id++; 
0F1E:  INC.B   0812
.................... 		}else{ 
0F20:  BRA     F26
.................... 			SM_id = 1; 
0F22:  MOV.B   #1,W0L
0F24:  MOV.B   W0L,812
.................... 		} 
.................... 	}else if (SM_id <= 3){ 
0F26:  BRA     10A0
0F28:  MOV.B   812,W0L
0F2A:  SE      W0,W0
0F2C:  CP      W0,#3
0F2E:  BRA     GT,F3A
.................... 		if (c == 0x02){ 
0F30:  MOV     81A,W4
0F32:  CP      W4,#2
0F34:  BRA     NZ,F38
.................... 			SM_id++; 
0F36:  INC.B   0812
.................... 		} 
.................... 	}else if (SM_id <= 4){ 
0F38:  BRA     10A0
0F3A:  MOV.B   812,W0L
0F3C:  SE      W0,W0
0F3E:  CP      W0,#4
0F40:  BRA     GT,F4C
.................... 		if ( c == 0x06){ 
0F42:  MOV     81A,W4
0F44:  CP      W4,#6
0F46:  BRA     NZ,F4A
.................... 			SM_id++; 
0F48:  INC.B   0812
.................... 		} 
.................... 	}else if (SM_id > 4 && SM_id <= 6){ 
0F4A:  BRA     10A0
0F4C:  MOV.B   812,W0L
0F4E:  SE      W0,W0
0F50:  CP      W0,#4
0F52:  BRA     LE,F6E
0F54:  MOV.B   812,W0L
0F56:  SE      W0,W0
0F58:  CP      W0,#6
0F5A:  BRA     GT,F6E
.................... 		arrayDataXI[SM_id - 5] = c; //PosX 
0F5C:  MOV.B   812,W0L
0F5E:  SE      W0,W0
0F60:  SUB     W0,#5,W5
0F62:  MOV     #806,W4
0F64:  ADD     W5,W4,W6
0F66:  MOV     81A,W0
0F68:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0F6A:  INC.B   0812
.................... 	}else if (SM_id == 7){ 
0F6C:  BRA     10A0
0F6E:  MOV.B   812,W0L
0F70:  SE      W0,W0
0F72:  CP      W0,#7
0F74:  BRA     NZ,F88
.................... 		arrayData[SM_id - 7] = c;	//DirPosX[0] 
0F76:  MOV.B   812,W0L
0F78:  SE      W0,W0
0F7A:  SUB     W0,#7,W5
0F7C:  MOV     #800,W4
0F7E:  ADD     W5,W4,W6
0F80:  MOV     81A,W0
0F82:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0F84:  INC.B   0812
.................... 	}else if (SM_id > 7 && SM_id <= 9){ 
0F86:  BRA     10A0
0F88:  MOV.B   812,W0L
0F8A:  SE      W0,W0
0F8C:  CP      W0,#7
0F8E:  BRA     LE,FAA
0F90:  MOV.B   812,W0L
0F92:  SE      W0,W0
0F94:  CP      W0,#9
0F96:  BRA     GT,FAA
.................... 		arrayDataYI[SM_id - 8] = c;	//PosY 
0F98:  MOV.B   812,W0L
0F9A:  SE      W0,W0
0F9C:  SUB     W0,#8,W5
0F9E:  MOV     #80A,W4
0FA0:  ADD     W5,W4,W6
0FA2:  MOV     81A,W0
0FA4:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0FA6:  INC.B   0812
.................... 	}else if (SM_id == 10){ 
0FA8:  BRA     10A0
0FAA:  MOV.B   812,W0L
0FAC:  SE      W0,W0
0FAE:  CP      W0,#A
0FB0:  BRA     NZ,FC4
.................... 		arrayData[SM_id - 9] = c;	//DirPosY[1] 
0FB2:  MOV.B   812,W0L
0FB4:  SE      W0,W0
0FB6:  SUB     W0,#9,W5
0FB8:  MOV     #800,W4
0FBA:  ADD     W5,W4,W6
0FBC:  MOV     81A,W0
0FBE:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0FC0:  INC.B   0812
.................... 	}else if (SM_id > 10 && SM_id <= 12){ 
0FC2:  BRA     10A0
0FC4:  MOV.B   812,W0L
0FC6:  SE      W0,W0
0FC8:  CP      W0,#A
0FCA:  BRA     LE,FE6
0FCC:  MOV.B   812,W0L
0FCE:  SE      W0,W0
0FD0:  CP      W0,#C
0FD2:  BRA     GT,FE6
.................... 		arrayAng[SM_id - 11] = c;	//Ang 
0FD4:  MOV.B   812,W0L
0FD6:  SE      W0,W0
0FD8:  SUB     W0,#B,W5
0FDA:  MOV     #80E,W4
0FDC:  ADD     W5,W4,W6
0FDE:  MOV     81A,W0
0FE0:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
0FE2:  INC.B   0812
.................... 	}else if (SM_id > 12 && SM_id <= 14){ 
0FE4:  BRA     10A0
0FE6:  MOV.B   812,W0L
0FE8:  SE      W0,W0
0FEA:  CP      W0,#C
0FEC:  BRA     LE,1008
0FEE:  MOV.B   812,W0L
0FF0:  SE      W0,W0
0FF2:  CP      W0,#E
0FF4:  BRA     GT,1008
.................... 		arrayDataXII[SM_id - 13] = c;//goX 
0FF6:  MOV.B   812,W0L
0FF8:  SE      W0,W0
0FFA:  SUB     W0,#D,W5
0FFC:  MOV     #808,W4
0FFE:  ADD     W5,W4,W6
1000:  MOV     81A,W0
1002:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
1004:  INC.B   0812
.................... 	}else if (SM_id == 15){ 
1006:  BRA     10A0
1008:  MOV.B   812,W0L
100A:  SE      W0,W0
100C:  CP      W0,#F
100E:  BRA     NZ,1022
.................... 		arrayData[SM_id - 13] = c;	//goDir[2] 
1010:  MOV.B   812,W0L
1012:  SE      W0,W0
1014:  SUB     W0,#D,W5
1016:  MOV     #800,W4
1018:  ADD     W5,W4,W6
101A:  MOV     81A,W0
101C:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
101E:  INC.B   0812
.................... 	}else if (SM_id > 15 && SM_id <= 17){ 
1020:  BRA     10A0
1022:  MOV.B   812,W0L
1024:  SE      W0,W0
1026:  CP      W0,#F
1028:  BRA     LE,1044
102A:  MOV.B   812,W0L
102C:  SE      W0,W0
102E:  CP      W0,#11
1030:  BRA     GT,1044
.................... 		arrayDataYII[SM_id - 16] = c;	//goY 
1032:  MOV.B   812,W0L
1034:  SE      W0,W0
1036:  SUB     W0,#10,W5
1038:  MOV     #80C,W4
103A:  ADD     W5,W4,W6
103C:  MOV     81A,W0
103E:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
1040:  INC.B   0812
.................... 	}else if (SM_id == 18){ 
1042:  BRA     10A0
1044:  MOV.B   812,W0L
1046:  SE      W0,W0
1048:  CP      W0,#12
104A:  BRA     NZ,105E
.................... 		arrayData[SM_id - 15] = c;	//goDir[3] 
104C:  MOV.B   812,W0L
104E:  SE      W0,W0
1050:  SUB     W0,#F,W5
1052:  MOV     #800,W4
1054:  ADD     W5,W4,W6
1056:  MOV     81A,W0
1058:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
105A:  INC.B   0812
.................... 	}else if (SM_id > 18 && SM_id <= 20){ 
105C:  BRA     10A0
105E:  MOV.B   812,W0L
1060:  SE      W0,W0
1062:  CP      W0,#12
1064:  BRA     LE,10A0
1066:  MOV.B   812,W0L
1068:  SE      W0,W0
106A:  CP      W0,#14
106C:  BRA     GT,10A0
.................... 		arrayAngGrip[SM_id - 19] = c;//Anggrip 
106E:  MOV.B   812,W0L
1070:  SE      W0,W0
1072:  SUB     W0,#13,W5
1074:  MOV     #810,W4
1076:  ADD     W5,W4,W6
1078:  MOV     81A,W0
107A:  MOV.B   W0L,[W6+#0]
.................... 		SM_id++; 
107C:  INC.B   0812
.................... 		if(SM_id >= 21){ 
107E:  MOV.B   812,W0L
1080:  SE      W0,W0
1082:  CP      W0,#15
1084:  BRA     LT,10A0
.................... 			printf("%d\n",SM_id); 
1086:  MOV.B   812,W0L
1088:  SE      W0,W0
108A:  MOV     #0,W4
108C:  CALL    E16
1090:  BTSC.B  223.1
1092:  BRA     1090
1094:  MOV     #A,W4
1096:  MOV     W4,224
.................... 			getPackage = 1; 
1098:  MOV     #1,W4
109A:  MOV     W4,814
.................... 			SM_id = 1; 
109C:  MOV.B   #1,W0L
109E:  MOV.B   W0L,812
.................... 		} 
.................... 	} 
10A0:  MOV     [--W15],W6
10A2:  MOV     [--W15],W5
10A4:  RETURN  
.................... } 
....................  
.................... #INT_RDA               // receive data interrupt one time per one  
.................... void UART1_Isr() { 
10A6:  PUSH    42
10A8:  PUSH    36
10AA:  PUSH    32
10AC:  MOV     W0,[W15++]
10AE:  MOV     #2,W0
10B0:  REPEAT  #C
10B2:  MOV     [W0++],[W15++]
10B4:  BTSS.B  222.0
10B6:  BRA     10B4
10B8:  MOV     226,W0
10BA:  MOV.B   W0L,818
10BC:  CLR.B   819
....................     int c = getc(); 
....................     SM_RxD(c); 
10BE:  PUSH    818
10C0:  POP     81A
10C2:  CALL    F0C
10C6:  BCLR.B  85.3
10C8:  MOV     #1A,W0
10CA:  REPEAT  #C
10CC:  MOV     [--W15],[W0--]
10CE:  MOV     [--W15],W0
10D0:  POP     32
10D2:  POP     36
10D4:  POP     42
10D6:  RETFIE  
.................... } 
.................... void main(){ 
10D8:  MOV     #2780,W15
10DA:  MOV     #27FF,W0
10DC:  MOV     W0,20
10DE:  NOP     
10E0:  MOV     #4444,W0
10E2:  MOV     W0,A8
10E4:  BSET.B  81.7
10E6:  MOV     #46,W0
10E8:  MOV.B   W0L,742
10EA:  MOV     #57,W0
10EC:  MOV.B   W0L,742
10EE:  BCLR.B  742.6
10F0:  MOV     #3F0C,W0
10F2:  MOV     W0,6A4
10F4:  MOV     #300,W0
10F6:  MOV     W0,6CC
10F8:  MOV     #46,W0
10FA:  MOV.B   W0L,742
10FC:  MOV     #57,W0
10FE:  MOV.B   W0L,742
1100:  BSET.B  742.6
1102:  CLR     744
1104:  MOV     #8000,W4
1106:  MOV     W4,220
1108:  MOV     #400,W4
110A:  MOV     W4,222
110C:  BSET.B  220.3
110E:  MOV     #22,W4
1110:  MOV     W4,228
1112:  MOV.B   #1,W0L
1114:  MOV.B   W0L,812
1116:  CLR     814
1118:  SETM    32C
111A:  CLR     800
111C:  CLR     802
111E:  CLR     804
1120:  CLR     806
1122:  CLR     808
1124:  CLR     80A
1126:  CLR     80C
1128:  CLR     80E
112A:  CLR     810
.................... 	disable_interrupts(GLOBAL); 
112C:  BCLR.B  81.7
112E:  MOV     #E0,W4
1130:  MOV     W4,42
1132:  BSET.B  81.7
.................... 	 
....................     clear_interrupt(INT_RDA);   // recommend style coding to confirm everything clear before use 
1134:  REPEAT  #3
1136:  MOV     226,W0
1138:  BCLR.B  85.3
....................     enable_interrupts(INT_RDA); 
113A:  BSET.B  95.3
.................... 	enable_interrupts(GLOBAL); 
113C:  BCLR.B  81.7
113E:  CLR     42
1140:  BSET.B  81.7
.................... 	while(TRUE){ 
.................... 		 
.................... 		if (getPackage >= 1){ 
1142:  MOV     814,W4
1144:  CP      W4,#1
1146:  BRA     LT,117A
.................... 			getPackage = 0; 
1148:  CLR     814
.................... 			int bagPosX;//, bagPosY, goPosX, goPosY ; 
.................... 			memcpy(&bagPosX, arrayDataXI, sizeof(bagPosX)); 
114A:  MOV     #816,W1
114C:  MOV     #806,W2
114E:  REPEAT  #1
1150:  MOV.B   [W2++],[W1++]
.................... 			//printf("\nresult = %d\n", array[0]); 
.................... 			printf("\nresult = %d\n", bagPosX); 
1152:  MOV     #0,W1
1154:  MOV     W1,W0
1156:  CLR.B   1
1158:  CALL    DFC
115C:  INC     W1,W1
115E:  BTSC.B  223.1
1160:  BRA     115E
1162:  MOV     W0,224
1164:  MOV     #9,W0
1166:  CPSGT   W1,W0
1168:  BRA     1154
116A:  MOV     816,W0
116C:  MOV     #0,W4
116E:  CALL    E16
1172:  BTSC.B  223.1
1174:  BRA     1172
1176:  MOV     #A,W4
1178:  MOV     W4,224
.................... 			//printf("\nresult = %d\n", arrayData[0]); 
.................... 			//printf("\nresult = %d\n", arrayData[1]); 
.................... 			//printf("\nresult = %d\n", arrayData[2]); 
.................... 			//printf("\nresult = %d\n", arrayData[3]); 
.................... 		} 
117A:  BRA     1142
.................... 	} 
.................... } 
....................  
117C:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
